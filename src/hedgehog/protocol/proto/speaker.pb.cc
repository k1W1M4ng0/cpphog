// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/speaker.proto

#include "hedgehog/protocol/proto/speaker.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hedgehog {
namespace protocol {
namespace proto {

inline constexpr SpeakerAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : frequency_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SpeakerAction::SpeakerAction(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SpeakerActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakerActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakerActionDefaultTypeInternal() {}
  union {
    SpeakerAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakerActionDefaultTypeInternal _SpeakerAction_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
static ::_pb::Metadata file_level_metadata_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto = nullptr;
const ::uint32_t TableStruct_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::SpeakerAction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::SpeakerAction, _impl_.frequency_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::hedgehog::protocol::proto::SpeakerAction)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hedgehog::protocol::proto::_SpeakerAction_default_instance_._instance,
};
const char descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%hedgehog/protocol/proto/speaker.proto\022"
    "\027hedgehog.protocol.proto\"\"\n\rSpeakerActio"
    "n\022\021\n\tfrequency\030\001 \001(\rB+\n\037at.pria.hedgehog"
    ".protocol.protoB\010SpeakerPb\006proto3"
};
static ::absl::once_flag descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto = {
    false,
    false,
    153,
    descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto,
    "hedgehog/protocol/proto/speaker.proto",
    &descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto_once,
    nullptr,
    0,
    1,
    schemas,
    file_default_instances,
    TableStruct_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto::offsets,
    file_level_metadata_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto,
    file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto,
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto_getter() {
  return &descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto(&descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto);
namespace hedgehog {
namespace protocol {
namespace proto {
// ===================================================================

class SpeakerAction::_Internal {
 public:
};

SpeakerAction::SpeakerAction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.SpeakerAction)
}
SpeakerAction::SpeakerAction(
    ::google::protobuf::Arena* arena, const SpeakerAction& from)
    : SpeakerAction(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SpeakerAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SpeakerAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.frequency_ = {};
}
SpeakerAction::~SpeakerAction() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.SpeakerAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SpeakerAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SpeakerAction::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.SpeakerAction)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frequency_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SpeakerAction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SpeakerAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SpeakerAction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // uint32 frequency = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SpeakerAction, _impl_.frequency_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SpeakerAction, _impl_.frequency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 frequency = 1;
    {PROTOBUF_FIELD_OFFSET(SpeakerAction, _impl_.frequency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SpeakerAction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.SpeakerAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 frequency = 1;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_frequency(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.SpeakerAction)
  return target;
}

::size_t SpeakerAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.SpeakerAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 frequency = 1;
  if (this->_internal_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_frequency());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SpeakerAction::_class_data_ = {
    SpeakerAction::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* SpeakerAction::GetClassData() const {
  return &_class_data_;
}

void SpeakerAction::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SpeakerAction*>(&to_msg);
  auto& from = static_cast<const SpeakerAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.SpeakerAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SpeakerAction::CopyFrom(const SpeakerAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.SpeakerAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SpeakerAction::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SpeakerAction::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SpeakerAction::InternalSwap(SpeakerAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.frequency_, other->_impl_.frequency_);
}

::google::protobuf::Metadata SpeakerAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
