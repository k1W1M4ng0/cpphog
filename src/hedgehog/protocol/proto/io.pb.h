// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/io.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fio_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fio_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "hedgehog/protocol/proto/subscription.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hedgehog_2fprotocol_2fproto_2fio_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto;
namespace hedgehog {
namespace protocol {
namespace proto {
class AnalogMessage;
struct AnalogMessageDefaultTypeInternal;
extern AnalogMessageDefaultTypeInternal _AnalogMessage_default_instance_;
class DigitalMessage;
struct DigitalMessageDefaultTypeInternal;
extern DigitalMessageDefaultTypeInternal _DigitalMessage_default_instance_;
class IOAction;
struct IOActionDefaultTypeInternal;
extern IOActionDefaultTypeInternal _IOAction_default_instance_;
class IOCommandMessage;
struct IOCommandMessageDefaultTypeInternal;
extern IOCommandMessageDefaultTypeInternal _IOCommandMessage_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hedgehog {
namespace protocol {
namespace proto {
enum IOFlags : int {
  INPUT_FLOATING = 0,
  INPUT_PULLUP = 2,
  INPUT_PULLDOWN = 4,
  OUTPUT_OFF = 1,
  OUTPUT_ON = 9,
  OUTPUT = 1,
  PULLUP = 2,
  PULLDOWN = 4,
  LEVEL = 8,
  IOFlags_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  IOFlags_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool IOFlags_IsValid(int value);
extern const uint32_t IOFlags_internal_data_[];
constexpr IOFlags IOFlags_MIN = static_cast<IOFlags>(0);
constexpr IOFlags IOFlags_MAX = static_cast<IOFlags>(9);
constexpr int IOFlags_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
IOFlags_descriptor();
template <typename T>
const std::string& IOFlags_Name(T value) {
  static_assert(std::is_same<T, IOFlags>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IOFlags_Name().");
  return IOFlags_Name(static_cast<IOFlags>(value));
}
template <>
inline const std::string& IOFlags_Name(IOFlags value) {
  return ::google::protobuf::internal::NameOfDenseEnum<IOFlags_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool IOFlags_Parse(absl::string_view name, IOFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IOFlags>(
      IOFlags_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class IOAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.IOAction) */ {
 public:
  inline IOAction() : IOAction(nullptr) {}
  ~IOAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IOAction(::google::protobuf::internal::ConstantInitialized);

  inline IOAction(const IOAction& from)
      : IOAction(nullptr, from) {}
  IOAction(IOAction&& from) noexcept
    : IOAction() {
    *this = ::std::move(from);
  }

  inline IOAction& operator=(const IOAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOAction& operator=(IOAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOAction* internal_default_instance() {
    return reinterpret_cast<const IOAction*>(
               &_IOAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IOAction& a, IOAction& b) {
    a.Swap(&b);
  }
  inline void Swap(IOAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IOAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IOAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IOAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IOAction& from) {
    IOAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IOAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.IOAction";
  }
  protected:
  explicit IOAction(::google::protobuf::Arena* arena);
  IOAction(::google::protobuf::Arena* arena, const IOAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // uint32 port = 1;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // .hedgehog.protocol.proto.IOFlags flags = 2;
  void clear_flags() ;
  ::hedgehog::protocol::proto::IOFlags flags() const;
  void set_flags(::hedgehog::protocol::proto::IOFlags value);

  private:
  ::hedgehog::protocol::proto::IOFlags _internal_flags() const;
  void _internal_set_flags(::hedgehog::protocol::proto::IOFlags value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.IOAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t port_;
    int flags_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto;
};// -------------------------------------------------------------------

class IOCommandMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.IOCommandMessage) */ {
 public:
  inline IOCommandMessage() : IOCommandMessage(nullptr) {}
  ~IOCommandMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IOCommandMessage(::google::protobuf::internal::ConstantInitialized);

  inline IOCommandMessage(const IOCommandMessage& from)
      : IOCommandMessage(nullptr, from) {}
  IOCommandMessage(IOCommandMessage&& from) noexcept
    : IOCommandMessage() {
    *this = ::std::move(from);
  }

  inline IOCommandMessage& operator=(const IOCommandMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline IOCommandMessage& operator=(IOCommandMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IOCommandMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const IOCommandMessage* internal_default_instance() {
    return reinterpret_cast<const IOCommandMessage*>(
               &_IOCommandMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IOCommandMessage& a, IOCommandMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(IOCommandMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IOCommandMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IOCommandMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IOCommandMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IOCommandMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IOCommandMessage& from) {
    IOCommandMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IOCommandMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.IOCommandMessage";
  }
  protected:
  explicit IOCommandMessage(::google::protobuf::Arena* arena);
  IOCommandMessage(::google::protobuf::Arena* arena, const IOCommandMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 3,
    kPortFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  bool has_subscription() const;
  void clear_subscription() ;
  const ::hedgehog::protocol::proto::Subscription& subscription() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::Subscription* release_subscription();
  ::hedgehog::protocol::proto::Subscription* mutable_subscription();
  void set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  void unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  ::hedgehog::protocol::proto::Subscription* unsafe_arena_release_subscription();

  private:
  const ::hedgehog::protocol::proto::Subscription& _internal_subscription() const;
  ::hedgehog::protocol::proto::Subscription* _internal_mutable_subscription();

  public:
  // uint32 port = 1;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // .hedgehog.protocol.proto.IOFlags flags = 2;
  void clear_flags() ;
  ::hedgehog::protocol::proto::IOFlags flags() const;
  void set_flags(::hedgehog::protocol::proto::IOFlags value);

  private:
  ::hedgehog::protocol::proto::IOFlags _internal_flags() const;
  void _internal_set_flags(::hedgehog::protocol::proto::IOFlags value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.IOCommandMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::hedgehog::protocol::proto::Subscription* subscription_;
    ::uint32_t port_;
    int flags_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto;
};// -------------------------------------------------------------------

class DigitalMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.DigitalMessage) */ {
 public:
  inline DigitalMessage() : DigitalMessage(nullptr) {}
  ~DigitalMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DigitalMessage(::google::protobuf::internal::ConstantInitialized);

  inline DigitalMessage(const DigitalMessage& from)
      : DigitalMessage(nullptr, from) {}
  DigitalMessage(DigitalMessage&& from) noexcept
    : DigitalMessage() {
    *this = ::std::move(from);
  }

  inline DigitalMessage& operator=(const DigitalMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalMessage& operator=(DigitalMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalMessage* internal_default_instance() {
    return reinterpret_cast<const DigitalMessage*>(
               &_DigitalMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DigitalMessage& a, DigitalMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DigitalMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DigitalMessage& from) {
    DigitalMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DigitalMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.DigitalMessage";
  }
  protected:
  explicit DigitalMessage(::google::protobuf::Arena* arena);
  DigitalMessage(::google::protobuf::Arena* arena, const DigitalMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 3,
    kPortFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  bool has_subscription() const;
  void clear_subscription() ;
  const ::hedgehog::protocol::proto::Subscription& subscription() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::Subscription* release_subscription();
  ::hedgehog::protocol::proto::Subscription* mutable_subscription();
  void set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  void unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  ::hedgehog::protocol::proto::Subscription* unsafe_arena_release_subscription();

  private:
  const ::hedgehog::protocol::proto::Subscription& _internal_subscription() const;
  ::hedgehog::protocol::proto::Subscription* _internal_mutable_subscription();

  public:
  // uint32 port = 1;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // bool value = 2;
  void clear_value() ;
  bool value() const;
  void set_value(bool value);

  private:
  bool _internal_value() const;
  void _internal_set_value(bool value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.DigitalMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::hedgehog::protocol::proto::Subscription* subscription_;
    ::uint32_t port_;
    bool value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto;
};// -------------------------------------------------------------------

class AnalogMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.AnalogMessage) */ {
 public:
  inline AnalogMessage() : AnalogMessage(nullptr) {}
  ~AnalogMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AnalogMessage(::google::protobuf::internal::ConstantInitialized);

  inline AnalogMessage(const AnalogMessage& from)
      : AnalogMessage(nullptr, from) {}
  AnalogMessage(AnalogMessage&& from) noexcept
    : AnalogMessage() {
    *this = ::std::move(from);
  }

  inline AnalogMessage& operator=(const AnalogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogMessage& operator=(AnalogMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogMessage* internal_default_instance() {
    return reinterpret_cast<const AnalogMessage*>(
               &_AnalogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AnalogMessage& a, AnalogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AnalogMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AnalogMessage& from) {
    AnalogMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AnalogMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.AnalogMessage";
  }
  protected:
  explicit AnalogMessage(::google::protobuf::Arena* arena);
  AnalogMessage(::google::protobuf::Arena* arena, const AnalogMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscriptionFieldNumber = 3,
    kPortFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  bool has_subscription() const;
  void clear_subscription() ;
  const ::hedgehog::protocol::proto::Subscription& subscription() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::Subscription* release_subscription();
  ::hedgehog::protocol::proto::Subscription* mutable_subscription();
  void set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  void unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value);
  ::hedgehog::protocol::proto::Subscription* unsafe_arena_release_subscription();

  private:
  const ::hedgehog::protocol::proto::Subscription& _internal_subscription() const;
  ::hedgehog::protocol::proto::Subscription* _internal_mutable_subscription();

  public:
  // uint32 port = 1;
  void clear_port() ;
  ::uint32_t port() const;
  void set_port(::uint32_t value);

  private:
  ::uint32_t _internal_port() const;
  void _internal_set_port(::uint32_t value);

  public:
  // uint32 value = 2;
  void clear_value() ;
  ::uint32_t value() const;
  void set_value(::uint32_t value);

  private:
  ::uint32_t _internal_value() const;
  void _internal_set_value(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.AnalogMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::hedgehog::protocol::proto::Subscription* subscription_;
    ::uint32_t port_;
    ::uint32_t value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IOAction

// uint32 port = 1;
inline void IOAction::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t IOAction::port() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.IOAction.port)
  return _internal_port();
}
inline void IOAction::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.IOAction.port)
}
inline ::uint32_t IOAction::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void IOAction::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// .hedgehog.protocol.proto.IOFlags flags = 2;
inline void IOAction::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0;
}
inline ::hedgehog::protocol::proto::IOFlags IOAction::flags() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.IOAction.flags)
  return _internal_flags();
}
inline void IOAction::set_flags(::hedgehog::protocol::proto::IOFlags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.IOAction.flags)
}
inline ::hedgehog::protocol::proto::IOFlags IOAction::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hedgehog::protocol::proto::IOFlags>(_impl_.flags_);
}
inline void IOAction::_internal_set_flags(::hedgehog::protocol::proto::IOFlags value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flags_ = value;
}

// -------------------------------------------------------------------

// IOCommandMessage

// uint32 port = 1;
inline void IOCommandMessage::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t IOCommandMessage::port() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.IOCommandMessage.port)
  return _internal_port();
}
inline void IOCommandMessage::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.IOCommandMessage.port)
}
inline ::uint32_t IOCommandMessage::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void IOCommandMessage::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// .hedgehog.protocol.proto.IOFlags flags = 2;
inline void IOCommandMessage::clear_flags() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.flags_ = 0;
}
inline ::hedgehog::protocol::proto::IOFlags IOCommandMessage::flags() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.IOCommandMessage.flags)
  return _internal_flags();
}
inline void IOCommandMessage::set_flags(::hedgehog::protocol::proto::IOFlags value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.IOCommandMessage.flags)
}
inline ::hedgehog::protocol::proto::IOFlags IOCommandMessage::_internal_flags() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hedgehog::protocol::proto::IOFlags>(_impl_.flags_);
}
inline void IOCommandMessage::_internal_set_flags(::hedgehog::protocol::proto::IOFlags value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.flags_ = value;
}

// .hedgehog.protocol.proto.Subscription subscription = 3;
inline bool IOCommandMessage::has_subscription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscription_ != nullptr);
  return value;
}
inline const ::hedgehog::protocol::proto::Subscription& IOCommandMessage::_internal_subscription() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::hedgehog::protocol::proto::Subscription* p = _impl_.subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::hedgehog::protocol::proto::Subscription&>(::hedgehog::protocol::proto::_Subscription_default_instance_);
}
inline const ::hedgehog::protocol::proto::Subscription& IOCommandMessage::subscription() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.IOCommandMessage.subscription)
  return _internal_subscription();
}
inline void IOCommandMessage::unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }
  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.IOCommandMessage.subscription)
}
inline ::hedgehog::protocol::proto::Subscription* IOCommandMessage::release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* released = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::hedgehog::protocol::proto::Subscription* IOCommandMessage::unsafe_arena_release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.IOCommandMessage.subscription)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* temp = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
  return temp;
}
inline ::hedgehog::protocol::proto::Subscription* IOCommandMessage::_internal_mutable_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(GetArena());
    _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(p);
  }
  return _impl_.subscription_;
}
inline ::hedgehog::protocol::proto::Subscription* IOCommandMessage::mutable_subscription() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::Subscription* _msg = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.IOCommandMessage.subscription)
  return _msg;
}
inline void IOCommandMessage::set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.IOCommandMessage.subscription)
}

// -------------------------------------------------------------------

// AnalogMessage

// uint32 port = 1;
inline void AnalogMessage::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t AnalogMessage::port() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.AnalogMessage.port)
  return _internal_port();
}
inline void AnalogMessage::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.AnalogMessage.port)
}
inline ::uint32_t AnalogMessage::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void AnalogMessage::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// uint32 value = 2;
inline void AnalogMessage::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = 0u;
}
inline ::uint32_t AnalogMessage::value() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.AnalogMessage.value)
  return _internal_value();
}
inline void AnalogMessage::set_value(::uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.AnalogMessage.value)
}
inline ::uint32_t AnalogMessage::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void AnalogMessage::_internal_set_value(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// .hedgehog.protocol.proto.Subscription subscription = 3;
inline bool AnalogMessage::has_subscription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscription_ != nullptr);
  return value;
}
inline const ::hedgehog::protocol::proto::Subscription& AnalogMessage::_internal_subscription() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::hedgehog::protocol::proto::Subscription* p = _impl_.subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::hedgehog::protocol::proto::Subscription&>(::hedgehog::protocol::proto::_Subscription_default_instance_);
}
inline const ::hedgehog::protocol::proto::Subscription& AnalogMessage::subscription() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.AnalogMessage.subscription)
  return _internal_subscription();
}
inline void AnalogMessage::unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }
  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.AnalogMessage.subscription)
}
inline ::hedgehog::protocol::proto::Subscription* AnalogMessage::release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* released = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::hedgehog::protocol::proto::Subscription* AnalogMessage::unsafe_arena_release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.AnalogMessage.subscription)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* temp = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
  return temp;
}
inline ::hedgehog::protocol::proto::Subscription* AnalogMessage::_internal_mutable_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(GetArena());
    _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(p);
  }
  return _impl_.subscription_;
}
inline ::hedgehog::protocol::proto::Subscription* AnalogMessage::mutable_subscription() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::Subscription* _msg = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.AnalogMessage.subscription)
  return _msg;
}
inline void AnalogMessage::set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.AnalogMessage.subscription)
}

// -------------------------------------------------------------------

// DigitalMessage

// uint32 port = 1;
inline void DigitalMessage::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0u;
}
inline ::uint32_t DigitalMessage::port() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.DigitalMessage.port)
  return _internal_port();
}
inline void DigitalMessage::set_port(::uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.DigitalMessage.port)
}
inline ::uint32_t DigitalMessage::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void DigitalMessage::_internal_set_port(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// bool value = 2;
inline void DigitalMessage::clear_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.value_ = false;
}
inline bool DigitalMessage::value() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.DigitalMessage.value)
  return _internal_value();
}
inline void DigitalMessage::set_value(bool value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.DigitalMessage.value)
}
inline bool DigitalMessage::_internal_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.value_;
}
inline void DigitalMessage::_internal_set_value(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.value_ = value;
}

// .hedgehog.protocol.proto.Subscription subscription = 3;
inline bool DigitalMessage::has_subscription() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscription_ != nullptr);
  return value;
}
inline const ::hedgehog::protocol::proto::Subscription& DigitalMessage::_internal_subscription() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::hedgehog::protocol::proto::Subscription* p = _impl_.subscription_;
  return p != nullptr ? *p : reinterpret_cast<const ::hedgehog::protocol::proto::Subscription&>(::hedgehog::protocol::proto::_Subscription_default_instance_);
}
inline const ::hedgehog::protocol::proto::Subscription& DigitalMessage::subscription() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.DigitalMessage.subscription)
  return _internal_subscription();
}
inline void DigitalMessage::unsafe_arena_set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }
  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.DigitalMessage.subscription)
}
inline ::hedgehog::protocol::proto::Subscription* DigitalMessage::release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* released = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::hedgehog::protocol::proto::Subscription* DigitalMessage::unsafe_arena_release_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.DigitalMessage.subscription)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::hedgehog::protocol::proto::Subscription* temp = _impl_.subscription_;
  _impl_.subscription_ = nullptr;
  return temp;
}
inline ::hedgehog::protocol::proto::Subscription* DigitalMessage::_internal_mutable_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.subscription_ == nullptr) {
    auto* p = CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(GetArena());
    _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(p);
  }
  return _impl_.subscription_;
}
inline ::hedgehog::protocol::proto::Subscription* DigitalMessage::mutable_subscription() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::Subscription* _msg = _internal_mutable_subscription();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.DigitalMessage.subscription)
  return _msg;
}
inline void DigitalMessage::set_allocated_subscription(::hedgehog::protocol::proto::Subscription* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscription_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscription_ = reinterpret_cast<::hedgehog::protocol::proto::Subscription*>(value);
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.DigitalMessage.subscription)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hedgehog::protocol::proto::IOFlags> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::hedgehog::protocol::proto::IOFlags>() {
  return ::hedgehog::protocol::proto::IOFlags_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fio_2eproto_2epb_2eh
