// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/ack.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fack_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fack_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hedgehog_2fprotocol_2fproto_2fack_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hedgehog_2fprotocol_2fproto_2fack_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hedgehog_2fprotocol_2fproto_2fack_2eproto;
namespace hedgehog {
namespace protocol {
namespace proto {
class Acknowledgement;
struct AcknowledgementDefaultTypeInternal;
extern AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hedgehog {
namespace protocol {
namespace proto {
enum AcknowledgementCode : int {
  OK = 0,
  UNKNOWN_COMMAND = 1,
  INVALID_COMMAND = 2,
  UNSUPPORTED_COMMAND = 3,
  FAILED_COMMAND = 4,
  AcknowledgementCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AcknowledgementCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AcknowledgementCode_IsValid(int value);
extern const uint32_t AcknowledgementCode_internal_data_[];
constexpr AcknowledgementCode AcknowledgementCode_MIN = static_cast<AcknowledgementCode>(0);
constexpr AcknowledgementCode AcknowledgementCode_MAX = static_cast<AcknowledgementCode>(4);
constexpr int AcknowledgementCode_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
AcknowledgementCode_descriptor();
template <typename T>
const std::string& AcknowledgementCode_Name(T value) {
  static_assert(std::is_same<T, AcknowledgementCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AcknowledgementCode_Name().");
  return AcknowledgementCode_Name(static_cast<AcknowledgementCode>(value));
}
template <>
inline const std::string& AcknowledgementCode_Name(AcknowledgementCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AcknowledgementCode_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool AcknowledgementCode_Parse(absl::string_view name, AcknowledgementCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AcknowledgementCode>(
      AcknowledgementCode_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Acknowledgement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.Acknowledgement) */ {
 public:
  inline Acknowledgement() : Acknowledgement(nullptr) {}
  ~Acknowledgement() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Acknowledgement(::google::protobuf::internal::ConstantInitialized);

  inline Acknowledgement(const Acknowledgement& from)
      : Acknowledgement(nullptr, from) {}
  Acknowledgement(Acknowledgement&& from) noexcept
    : Acknowledgement() {
    *this = ::std::move(from);
  }

  inline Acknowledgement& operator=(const Acknowledgement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acknowledgement& operator=(Acknowledgement&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Acknowledgement& default_instance() {
    return *internal_default_instance();
  }
  static inline const Acknowledgement* internal_default_instance() {
    return reinterpret_cast<const Acknowledgement*>(
               &_Acknowledgement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Acknowledgement& a, Acknowledgement& b) {
    a.Swap(&b);
  }
  inline void Swap(Acknowledgement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acknowledgement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Acknowledgement* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Acknowledgement>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Acknowledgement& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Acknowledgement& from) {
    Acknowledgement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Acknowledgement* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.Acknowledgement";
  }
  protected:
  explicit Acknowledgement(::google::protobuf::Arena* arena);
  Acknowledgement(::google::protobuf::Arena* arena, const Acknowledgement& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* value);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // .hedgehog.protocol.proto.AcknowledgementCode code = 1;
  void clear_code() ;
  ::hedgehog::protocol::proto::AcknowledgementCode code() const;
  void set_code(::hedgehog::protocol::proto::AcknowledgementCode value);

  private:
  ::hedgehog::protocol::proto::AcknowledgementCode _internal_code() const;
  void _internal_set_code(::hedgehog::protocol::proto::AcknowledgementCode value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.Acknowledgement)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      55, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr message_;
    int code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fack_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Acknowledgement

// .hedgehog.protocol.proto.AcknowledgementCode code = 1;
inline void Acknowledgement::clear_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.code_ = 0;
}
inline ::hedgehog::protocol::proto::AcknowledgementCode Acknowledgement::code() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Acknowledgement.code)
  return _internal_code();
}
inline void Acknowledgement::set_code(::hedgehog::protocol::proto::AcknowledgementCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Acknowledgement.code)
}
inline ::hedgehog::protocol::proto::AcknowledgementCode Acknowledgement::_internal_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hedgehog::protocol::proto::AcknowledgementCode>(_impl_.code_);
}
inline void Acknowledgement::_internal_set_code(::hedgehog::protocol::proto::AcknowledgementCode value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.code_ = value;
}

// string message = 2;
inline void Acknowledgement::clear_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Acknowledgement::message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Acknowledgement.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Acknowledgement::set_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Acknowledgement.message)
}
inline std::string* Acknowledgement::mutable_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.Acknowledgement.message)
  return _s;
}
inline const std::string& Acknowledgement::_internal_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.message_.Get();
}
inline void Acknowledgement::_internal_set_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.message_.Set(value, GetArena());
}
inline std::string* Acknowledgement::_internal_mutable_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.message_.Mutable( GetArena());
}
inline std::string* Acknowledgement::release_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.Acknowledgement.message)
  return _impl_.message_.Release();
}
inline void Acknowledgement::set_allocated_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.Acknowledgement.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hedgehog::protocol::proto::AcknowledgementCode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::hedgehog::protocol::proto::AcknowledgementCode>() {
  return ::hedgehog::protocol::proto::AcknowledgementCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fack_2eproto_2epb_2eh
