// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/hedgehog.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "hedgehog/protocol/proto/ack.pb.h"
#include "hedgehog/protocol/proto/version.pb.h"
#include "hedgehog/protocol/proto/emergency.pb.h"
#include "hedgehog/protocol/proto/io.pb.h"
#include "hedgehog/protocol/proto/imu.pb.h"
#include "hedgehog/protocol/proto/motor.pb.h"
#include "hedgehog/protocol/proto/servo.pb.h"
#include "hedgehog/protocol/proto/process.pb.h"
#include "hedgehog/protocol/proto/speaker.pb.h"
#include "hedgehog/protocol/proto/vision.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto;
namespace hedgehog {
namespace protocol {
namespace proto {
class HedgehogMessage;
struct HedgehogMessageDefaultTypeInternal;
extern HedgehogMessageDefaultTypeInternal _HedgehogMessage_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hedgehog {
namespace protocol {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class HedgehogMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.HedgehogMessage) */ {
 public:
  inline HedgehogMessage() : HedgehogMessage(nullptr) {}
  ~HedgehogMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR HedgehogMessage(::google::protobuf::internal::ConstantInitialized);

  inline HedgehogMessage(const HedgehogMessage& from)
      : HedgehogMessage(nullptr, from) {}
  HedgehogMessage(HedgehogMessage&& from) noexcept
    : HedgehogMessage() {
    *this = ::std::move(from);
  }

  inline HedgehogMessage& operator=(const HedgehogMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline HedgehogMessage& operator=(HedgehogMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HedgehogMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAcknowledgement = 1,
    kVersionMessage = 26,
    kEmergencyAction = 27,
    kEmergencyMessage = 28,
    kIoAction = 2,
    kIoCommandMessage = 16,
    kAnalogMessage = 3,
    kDigitalMessage = 4,
    kImuMessage = 9,
    kMotorAction = 5,
    kMotorConfigAction = 24,
    kMotorCommandMessage = 17,
    kMotorStateMessage = 6,
    kMotorSetPositionAction = 18,
    kServoAction = 7,
    kServoCommandMessage = 19,
    kProcessExecuteAction = 20,
    kProcessExecuteReply = 21,
    kProcessStreamMessage = 8,
    kProcessSignalAction = 22,
    kProcessExitUpdate = 23,
    kSpeakerAction = 25,
    kVisionCameraAction = 29,
    kVisionChannelMessage = 30,
    kVisionCaptureFrameAction = 10,
    kVisionFrameMessage = 31,
    kVisionFeatureMessage = 11,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const HedgehogMessage* internal_default_instance() {
    return reinterpret_cast<const HedgehogMessage*>(
               &_HedgehogMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HedgehogMessage& a, HedgehogMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(HedgehogMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HedgehogMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HedgehogMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HedgehogMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HedgehogMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const HedgehogMessage& from) {
    HedgehogMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(HedgehogMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.HedgehogMessage";
  }
  protected:
  explicit HedgehogMessage(::google::protobuf::Arena* arena);
  HedgehogMessage(::google::protobuf::Arena* arena, const HedgehogMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgementFieldNumber = 1,
    kVersionMessageFieldNumber = 26,
    kEmergencyActionFieldNumber = 27,
    kEmergencyMessageFieldNumber = 28,
    kIoActionFieldNumber = 2,
    kIoCommandMessageFieldNumber = 16,
    kAnalogMessageFieldNumber = 3,
    kDigitalMessageFieldNumber = 4,
    kImuMessageFieldNumber = 9,
    kMotorActionFieldNumber = 5,
    kMotorConfigActionFieldNumber = 24,
    kMotorCommandMessageFieldNumber = 17,
    kMotorStateMessageFieldNumber = 6,
    kMotorSetPositionActionFieldNumber = 18,
    kServoActionFieldNumber = 7,
    kServoCommandMessageFieldNumber = 19,
    kProcessExecuteActionFieldNumber = 20,
    kProcessExecuteReplyFieldNumber = 21,
    kProcessStreamMessageFieldNumber = 8,
    kProcessSignalActionFieldNumber = 22,
    kProcessExitUpdateFieldNumber = 23,
    kSpeakerActionFieldNumber = 25,
    kVisionCameraActionFieldNumber = 29,
    kVisionChannelMessageFieldNumber = 30,
    kVisionCaptureFrameActionFieldNumber = 10,
    kVisionFrameMessageFieldNumber = 31,
    kVisionFeatureMessageFieldNumber = 11,
  };
  // .hedgehog.protocol.proto.Acknowledgement acknowledgement = 1;
  bool has_acknowledgement() const;
  private:
  bool _internal_has_acknowledgement() const;

  public:
  void clear_acknowledgement() ;
  const ::hedgehog::protocol::proto::Acknowledgement& acknowledgement() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::Acknowledgement* release_acknowledgement();
  ::hedgehog::protocol::proto::Acknowledgement* mutable_acknowledgement();
  void set_allocated_acknowledgement(::hedgehog::protocol::proto::Acknowledgement* value);
  void unsafe_arena_set_allocated_acknowledgement(::hedgehog::protocol::proto::Acknowledgement* value);
  ::hedgehog::protocol::proto::Acknowledgement* unsafe_arena_release_acknowledgement();

  private:
  const ::hedgehog::protocol::proto::Acknowledgement& _internal_acknowledgement() const;
  ::hedgehog::protocol::proto::Acknowledgement* _internal_mutable_acknowledgement();

  public:
  // .hedgehog.protocol.proto.VersionMessage version_message = 26;
  bool has_version_message() const;
  private:
  bool _internal_has_version_message() const;

  public:
  void clear_version_message() ;
  const ::hedgehog::protocol::proto::VersionMessage& version_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VersionMessage* release_version_message();
  ::hedgehog::protocol::proto::VersionMessage* mutable_version_message();
  void set_allocated_version_message(::hedgehog::protocol::proto::VersionMessage* value);
  void unsafe_arena_set_allocated_version_message(::hedgehog::protocol::proto::VersionMessage* value);
  ::hedgehog::protocol::proto::VersionMessage* unsafe_arena_release_version_message();

  private:
  const ::hedgehog::protocol::proto::VersionMessage& _internal_version_message() const;
  ::hedgehog::protocol::proto::VersionMessage* _internal_mutable_version_message();

  public:
  // .hedgehog.protocol.proto.EmergencyAction emergency_action = 27;
  bool has_emergency_action() const;
  private:
  bool _internal_has_emergency_action() const;

  public:
  void clear_emergency_action() ;
  const ::hedgehog::protocol::proto::EmergencyAction& emergency_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::EmergencyAction* release_emergency_action();
  ::hedgehog::protocol::proto::EmergencyAction* mutable_emergency_action();
  void set_allocated_emergency_action(::hedgehog::protocol::proto::EmergencyAction* value);
  void unsafe_arena_set_allocated_emergency_action(::hedgehog::protocol::proto::EmergencyAction* value);
  ::hedgehog::protocol::proto::EmergencyAction* unsafe_arena_release_emergency_action();

  private:
  const ::hedgehog::protocol::proto::EmergencyAction& _internal_emergency_action() const;
  ::hedgehog::protocol::proto::EmergencyAction* _internal_mutable_emergency_action();

  public:
  // .hedgehog.protocol.proto.EmergencyMessage emergency_message = 28;
  bool has_emergency_message() const;
  private:
  bool _internal_has_emergency_message() const;

  public:
  void clear_emergency_message() ;
  const ::hedgehog::protocol::proto::EmergencyMessage& emergency_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::EmergencyMessage* release_emergency_message();
  ::hedgehog::protocol::proto::EmergencyMessage* mutable_emergency_message();
  void set_allocated_emergency_message(::hedgehog::protocol::proto::EmergencyMessage* value);
  void unsafe_arena_set_allocated_emergency_message(::hedgehog::protocol::proto::EmergencyMessage* value);
  ::hedgehog::protocol::proto::EmergencyMessage* unsafe_arena_release_emergency_message();

  private:
  const ::hedgehog::protocol::proto::EmergencyMessage& _internal_emergency_message() const;
  ::hedgehog::protocol::proto::EmergencyMessage* _internal_mutable_emergency_message();

  public:
  // .hedgehog.protocol.proto.IOAction io_action = 2;
  bool has_io_action() const;
  private:
  bool _internal_has_io_action() const;

  public:
  void clear_io_action() ;
  const ::hedgehog::protocol::proto::IOAction& io_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::IOAction* release_io_action();
  ::hedgehog::protocol::proto::IOAction* mutable_io_action();
  void set_allocated_io_action(::hedgehog::protocol::proto::IOAction* value);
  void unsafe_arena_set_allocated_io_action(::hedgehog::protocol::proto::IOAction* value);
  ::hedgehog::protocol::proto::IOAction* unsafe_arena_release_io_action();

  private:
  const ::hedgehog::protocol::proto::IOAction& _internal_io_action() const;
  ::hedgehog::protocol::proto::IOAction* _internal_mutable_io_action();

  public:
  // .hedgehog.protocol.proto.IOCommandMessage io_command_message = 16;
  bool has_io_command_message() const;
  private:
  bool _internal_has_io_command_message() const;

  public:
  void clear_io_command_message() ;
  const ::hedgehog::protocol::proto::IOCommandMessage& io_command_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::IOCommandMessage* release_io_command_message();
  ::hedgehog::protocol::proto::IOCommandMessage* mutable_io_command_message();
  void set_allocated_io_command_message(::hedgehog::protocol::proto::IOCommandMessage* value);
  void unsafe_arena_set_allocated_io_command_message(::hedgehog::protocol::proto::IOCommandMessage* value);
  ::hedgehog::protocol::proto::IOCommandMessage* unsafe_arena_release_io_command_message();

  private:
  const ::hedgehog::protocol::proto::IOCommandMessage& _internal_io_command_message() const;
  ::hedgehog::protocol::proto::IOCommandMessage* _internal_mutable_io_command_message();

  public:
  // .hedgehog.protocol.proto.AnalogMessage analog_message = 3;
  bool has_analog_message() const;
  private:
  bool _internal_has_analog_message() const;

  public:
  void clear_analog_message() ;
  const ::hedgehog::protocol::proto::AnalogMessage& analog_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::AnalogMessage* release_analog_message();
  ::hedgehog::protocol::proto::AnalogMessage* mutable_analog_message();
  void set_allocated_analog_message(::hedgehog::protocol::proto::AnalogMessage* value);
  void unsafe_arena_set_allocated_analog_message(::hedgehog::protocol::proto::AnalogMessage* value);
  ::hedgehog::protocol::proto::AnalogMessage* unsafe_arena_release_analog_message();

  private:
  const ::hedgehog::protocol::proto::AnalogMessage& _internal_analog_message() const;
  ::hedgehog::protocol::proto::AnalogMessage* _internal_mutable_analog_message();

  public:
  // .hedgehog.protocol.proto.DigitalMessage digital_message = 4;
  bool has_digital_message() const;
  private:
  bool _internal_has_digital_message() const;

  public:
  void clear_digital_message() ;
  const ::hedgehog::protocol::proto::DigitalMessage& digital_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::DigitalMessage* release_digital_message();
  ::hedgehog::protocol::proto::DigitalMessage* mutable_digital_message();
  void set_allocated_digital_message(::hedgehog::protocol::proto::DigitalMessage* value);
  void unsafe_arena_set_allocated_digital_message(::hedgehog::protocol::proto::DigitalMessage* value);
  ::hedgehog::protocol::proto::DigitalMessage* unsafe_arena_release_digital_message();

  private:
  const ::hedgehog::protocol::proto::DigitalMessage& _internal_digital_message() const;
  ::hedgehog::protocol::proto::DigitalMessage* _internal_mutable_digital_message();

  public:
  // .hedgehog.protocol.proto.ImuMessage imu_message = 9;
  bool has_imu_message() const;
  private:
  bool _internal_has_imu_message() const;

  public:
  void clear_imu_message() ;
  const ::hedgehog::protocol::proto::ImuMessage& imu_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ImuMessage* release_imu_message();
  ::hedgehog::protocol::proto::ImuMessage* mutable_imu_message();
  void set_allocated_imu_message(::hedgehog::protocol::proto::ImuMessage* value);
  void unsafe_arena_set_allocated_imu_message(::hedgehog::protocol::proto::ImuMessage* value);
  ::hedgehog::protocol::proto::ImuMessage* unsafe_arena_release_imu_message();

  private:
  const ::hedgehog::protocol::proto::ImuMessage& _internal_imu_message() const;
  ::hedgehog::protocol::proto::ImuMessage* _internal_mutable_imu_message();

  public:
  // .hedgehog.protocol.proto.MotorAction motor_action = 5;
  bool has_motor_action() const;
  private:
  bool _internal_has_motor_action() const;

  public:
  void clear_motor_action() ;
  const ::hedgehog::protocol::proto::MotorAction& motor_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::MotorAction* release_motor_action();
  ::hedgehog::protocol::proto::MotorAction* mutable_motor_action();
  void set_allocated_motor_action(::hedgehog::protocol::proto::MotorAction* value);
  void unsafe_arena_set_allocated_motor_action(::hedgehog::protocol::proto::MotorAction* value);
  ::hedgehog::protocol::proto::MotorAction* unsafe_arena_release_motor_action();

  private:
  const ::hedgehog::protocol::proto::MotorAction& _internal_motor_action() const;
  ::hedgehog::protocol::proto::MotorAction* _internal_mutable_motor_action();

  public:
  // .hedgehog.protocol.proto.MotorConfigAction motor_config_action = 24;
  bool has_motor_config_action() const;
  private:
  bool _internal_has_motor_config_action() const;

  public:
  void clear_motor_config_action() ;
  const ::hedgehog::protocol::proto::MotorConfigAction& motor_config_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::MotorConfigAction* release_motor_config_action();
  ::hedgehog::protocol::proto::MotorConfigAction* mutable_motor_config_action();
  void set_allocated_motor_config_action(::hedgehog::protocol::proto::MotorConfigAction* value);
  void unsafe_arena_set_allocated_motor_config_action(::hedgehog::protocol::proto::MotorConfigAction* value);
  ::hedgehog::protocol::proto::MotorConfigAction* unsafe_arena_release_motor_config_action();

  private:
  const ::hedgehog::protocol::proto::MotorConfigAction& _internal_motor_config_action() const;
  ::hedgehog::protocol::proto::MotorConfigAction* _internal_mutable_motor_config_action();

  public:
  // .hedgehog.protocol.proto.MotorCommandMessage motor_command_message = 17;
  bool has_motor_command_message() const;
  private:
  bool _internal_has_motor_command_message() const;

  public:
  void clear_motor_command_message() ;
  const ::hedgehog::protocol::proto::MotorCommandMessage& motor_command_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::MotorCommandMessage* release_motor_command_message();
  ::hedgehog::protocol::proto::MotorCommandMessage* mutable_motor_command_message();
  void set_allocated_motor_command_message(::hedgehog::protocol::proto::MotorCommandMessage* value);
  void unsafe_arena_set_allocated_motor_command_message(::hedgehog::protocol::proto::MotorCommandMessage* value);
  ::hedgehog::protocol::proto::MotorCommandMessage* unsafe_arena_release_motor_command_message();

  private:
  const ::hedgehog::protocol::proto::MotorCommandMessage& _internal_motor_command_message() const;
  ::hedgehog::protocol::proto::MotorCommandMessage* _internal_mutable_motor_command_message();

  public:
  // .hedgehog.protocol.proto.MotorStateMessage motor_state_message = 6;
  bool has_motor_state_message() const;
  private:
  bool _internal_has_motor_state_message() const;

  public:
  void clear_motor_state_message() ;
  const ::hedgehog::protocol::proto::MotorStateMessage& motor_state_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::MotorStateMessage* release_motor_state_message();
  ::hedgehog::protocol::proto::MotorStateMessage* mutable_motor_state_message();
  void set_allocated_motor_state_message(::hedgehog::protocol::proto::MotorStateMessage* value);
  void unsafe_arena_set_allocated_motor_state_message(::hedgehog::protocol::proto::MotorStateMessage* value);
  ::hedgehog::protocol::proto::MotorStateMessage* unsafe_arena_release_motor_state_message();

  private:
  const ::hedgehog::protocol::proto::MotorStateMessage& _internal_motor_state_message() const;
  ::hedgehog::protocol::proto::MotorStateMessage* _internal_mutable_motor_state_message();

  public:
  // .hedgehog.protocol.proto.MotorSetPositionAction motor_set_position_action = 18;
  bool has_motor_set_position_action() const;
  private:
  bool _internal_has_motor_set_position_action() const;

  public:
  void clear_motor_set_position_action() ;
  const ::hedgehog::protocol::proto::MotorSetPositionAction& motor_set_position_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::MotorSetPositionAction* release_motor_set_position_action();
  ::hedgehog::protocol::proto::MotorSetPositionAction* mutable_motor_set_position_action();
  void set_allocated_motor_set_position_action(::hedgehog::protocol::proto::MotorSetPositionAction* value);
  void unsafe_arena_set_allocated_motor_set_position_action(::hedgehog::protocol::proto::MotorSetPositionAction* value);
  ::hedgehog::protocol::proto::MotorSetPositionAction* unsafe_arena_release_motor_set_position_action();

  private:
  const ::hedgehog::protocol::proto::MotorSetPositionAction& _internal_motor_set_position_action() const;
  ::hedgehog::protocol::proto::MotorSetPositionAction* _internal_mutable_motor_set_position_action();

  public:
  // .hedgehog.protocol.proto.ServoAction servo_action = 7;
  bool has_servo_action() const;
  private:
  bool _internal_has_servo_action() const;

  public:
  void clear_servo_action() ;
  const ::hedgehog::protocol::proto::ServoAction& servo_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ServoAction* release_servo_action();
  ::hedgehog::protocol::proto::ServoAction* mutable_servo_action();
  void set_allocated_servo_action(::hedgehog::protocol::proto::ServoAction* value);
  void unsafe_arena_set_allocated_servo_action(::hedgehog::protocol::proto::ServoAction* value);
  ::hedgehog::protocol::proto::ServoAction* unsafe_arena_release_servo_action();

  private:
  const ::hedgehog::protocol::proto::ServoAction& _internal_servo_action() const;
  ::hedgehog::protocol::proto::ServoAction* _internal_mutable_servo_action();

  public:
  // .hedgehog.protocol.proto.ServoCommandMessage servo_command_message = 19;
  bool has_servo_command_message() const;
  private:
  bool _internal_has_servo_command_message() const;

  public:
  void clear_servo_command_message() ;
  const ::hedgehog::protocol::proto::ServoCommandMessage& servo_command_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ServoCommandMessage* release_servo_command_message();
  ::hedgehog::protocol::proto::ServoCommandMessage* mutable_servo_command_message();
  void set_allocated_servo_command_message(::hedgehog::protocol::proto::ServoCommandMessage* value);
  void unsafe_arena_set_allocated_servo_command_message(::hedgehog::protocol::proto::ServoCommandMessage* value);
  ::hedgehog::protocol::proto::ServoCommandMessage* unsafe_arena_release_servo_command_message();

  private:
  const ::hedgehog::protocol::proto::ServoCommandMessage& _internal_servo_command_message() const;
  ::hedgehog::protocol::proto::ServoCommandMessage* _internal_mutable_servo_command_message();

  public:
  // .hedgehog.protocol.proto.ProcessExecuteAction process_execute_action = 20;
  bool has_process_execute_action() const;
  private:
  bool _internal_has_process_execute_action() const;

  public:
  void clear_process_execute_action() ;
  const ::hedgehog::protocol::proto::ProcessExecuteAction& process_execute_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ProcessExecuteAction* release_process_execute_action();
  ::hedgehog::protocol::proto::ProcessExecuteAction* mutable_process_execute_action();
  void set_allocated_process_execute_action(::hedgehog::protocol::proto::ProcessExecuteAction* value);
  void unsafe_arena_set_allocated_process_execute_action(::hedgehog::protocol::proto::ProcessExecuteAction* value);
  ::hedgehog::protocol::proto::ProcessExecuteAction* unsafe_arena_release_process_execute_action();

  private:
  const ::hedgehog::protocol::proto::ProcessExecuteAction& _internal_process_execute_action() const;
  ::hedgehog::protocol::proto::ProcessExecuteAction* _internal_mutable_process_execute_action();

  public:
  // .hedgehog.protocol.proto.ProcessExecuteReply process_execute_reply = 21;
  bool has_process_execute_reply() const;
  private:
  bool _internal_has_process_execute_reply() const;

  public:
  void clear_process_execute_reply() ;
  const ::hedgehog::protocol::proto::ProcessExecuteReply& process_execute_reply() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ProcessExecuteReply* release_process_execute_reply();
  ::hedgehog::protocol::proto::ProcessExecuteReply* mutable_process_execute_reply();
  void set_allocated_process_execute_reply(::hedgehog::protocol::proto::ProcessExecuteReply* value);
  void unsafe_arena_set_allocated_process_execute_reply(::hedgehog::protocol::proto::ProcessExecuteReply* value);
  ::hedgehog::protocol::proto::ProcessExecuteReply* unsafe_arena_release_process_execute_reply();

  private:
  const ::hedgehog::protocol::proto::ProcessExecuteReply& _internal_process_execute_reply() const;
  ::hedgehog::protocol::proto::ProcessExecuteReply* _internal_mutable_process_execute_reply();

  public:
  // .hedgehog.protocol.proto.ProcessStreamMessage process_stream_message = 8;
  bool has_process_stream_message() const;
  private:
  bool _internal_has_process_stream_message() const;

  public:
  void clear_process_stream_message() ;
  const ::hedgehog::protocol::proto::ProcessStreamMessage& process_stream_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ProcessStreamMessage* release_process_stream_message();
  ::hedgehog::protocol::proto::ProcessStreamMessage* mutable_process_stream_message();
  void set_allocated_process_stream_message(::hedgehog::protocol::proto::ProcessStreamMessage* value);
  void unsafe_arena_set_allocated_process_stream_message(::hedgehog::protocol::proto::ProcessStreamMessage* value);
  ::hedgehog::protocol::proto::ProcessStreamMessage* unsafe_arena_release_process_stream_message();

  private:
  const ::hedgehog::protocol::proto::ProcessStreamMessage& _internal_process_stream_message() const;
  ::hedgehog::protocol::proto::ProcessStreamMessage* _internal_mutable_process_stream_message();

  public:
  // .hedgehog.protocol.proto.ProcessSignalAction process_signal_action = 22;
  bool has_process_signal_action() const;
  private:
  bool _internal_has_process_signal_action() const;

  public:
  void clear_process_signal_action() ;
  const ::hedgehog::protocol::proto::ProcessSignalAction& process_signal_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ProcessSignalAction* release_process_signal_action();
  ::hedgehog::protocol::proto::ProcessSignalAction* mutable_process_signal_action();
  void set_allocated_process_signal_action(::hedgehog::protocol::proto::ProcessSignalAction* value);
  void unsafe_arena_set_allocated_process_signal_action(::hedgehog::protocol::proto::ProcessSignalAction* value);
  ::hedgehog::protocol::proto::ProcessSignalAction* unsafe_arena_release_process_signal_action();

  private:
  const ::hedgehog::protocol::proto::ProcessSignalAction& _internal_process_signal_action() const;
  ::hedgehog::protocol::proto::ProcessSignalAction* _internal_mutable_process_signal_action();

  public:
  // .hedgehog.protocol.proto.ProcessExitUpdate process_exit_update = 23;
  bool has_process_exit_update() const;
  private:
  bool _internal_has_process_exit_update() const;

  public:
  void clear_process_exit_update() ;
  const ::hedgehog::protocol::proto::ProcessExitUpdate& process_exit_update() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::ProcessExitUpdate* release_process_exit_update();
  ::hedgehog::protocol::proto::ProcessExitUpdate* mutable_process_exit_update();
  void set_allocated_process_exit_update(::hedgehog::protocol::proto::ProcessExitUpdate* value);
  void unsafe_arena_set_allocated_process_exit_update(::hedgehog::protocol::proto::ProcessExitUpdate* value);
  ::hedgehog::protocol::proto::ProcessExitUpdate* unsafe_arena_release_process_exit_update();

  private:
  const ::hedgehog::protocol::proto::ProcessExitUpdate& _internal_process_exit_update() const;
  ::hedgehog::protocol::proto::ProcessExitUpdate* _internal_mutable_process_exit_update();

  public:
  // .hedgehog.protocol.proto.SpeakerAction speaker_action = 25;
  bool has_speaker_action() const;
  private:
  bool _internal_has_speaker_action() const;

  public:
  void clear_speaker_action() ;
  const ::hedgehog::protocol::proto::SpeakerAction& speaker_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::SpeakerAction* release_speaker_action();
  ::hedgehog::protocol::proto::SpeakerAction* mutable_speaker_action();
  void set_allocated_speaker_action(::hedgehog::protocol::proto::SpeakerAction* value);
  void unsafe_arena_set_allocated_speaker_action(::hedgehog::protocol::proto::SpeakerAction* value);
  ::hedgehog::protocol::proto::SpeakerAction* unsafe_arena_release_speaker_action();

  private:
  const ::hedgehog::protocol::proto::SpeakerAction& _internal_speaker_action() const;
  ::hedgehog::protocol::proto::SpeakerAction* _internal_mutable_speaker_action();

  public:
  // .hedgehog.protocol.proto.VisionCameraAction vision_camera_action = 29;
  bool has_vision_camera_action() const;
  private:
  bool _internal_has_vision_camera_action() const;

  public:
  void clear_vision_camera_action() ;
  const ::hedgehog::protocol::proto::VisionCameraAction& vision_camera_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VisionCameraAction* release_vision_camera_action();
  ::hedgehog::protocol::proto::VisionCameraAction* mutable_vision_camera_action();
  void set_allocated_vision_camera_action(::hedgehog::protocol::proto::VisionCameraAction* value);
  void unsafe_arena_set_allocated_vision_camera_action(::hedgehog::protocol::proto::VisionCameraAction* value);
  ::hedgehog::protocol::proto::VisionCameraAction* unsafe_arena_release_vision_camera_action();

  private:
  const ::hedgehog::protocol::proto::VisionCameraAction& _internal_vision_camera_action() const;
  ::hedgehog::protocol::proto::VisionCameraAction* _internal_mutable_vision_camera_action();

  public:
  // .hedgehog.protocol.proto.VisionChannelMessage vision_channel_message = 30;
  bool has_vision_channel_message() const;
  private:
  bool _internal_has_vision_channel_message() const;

  public:
  void clear_vision_channel_message() ;
  const ::hedgehog::protocol::proto::VisionChannelMessage& vision_channel_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VisionChannelMessage* release_vision_channel_message();
  ::hedgehog::protocol::proto::VisionChannelMessage* mutable_vision_channel_message();
  void set_allocated_vision_channel_message(::hedgehog::protocol::proto::VisionChannelMessage* value);
  void unsafe_arena_set_allocated_vision_channel_message(::hedgehog::protocol::proto::VisionChannelMessage* value);
  ::hedgehog::protocol::proto::VisionChannelMessage* unsafe_arena_release_vision_channel_message();

  private:
  const ::hedgehog::protocol::proto::VisionChannelMessage& _internal_vision_channel_message() const;
  ::hedgehog::protocol::proto::VisionChannelMessage* _internal_mutable_vision_channel_message();

  public:
  // .hedgehog.protocol.proto.VisionCaptureFrameAction vision_capture_frame_action = 10;
  bool has_vision_capture_frame_action() const;
  private:
  bool _internal_has_vision_capture_frame_action() const;

  public:
  void clear_vision_capture_frame_action() ;
  const ::hedgehog::protocol::proto::VisionCaptureFrameAction& vision_capture_frame_action() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VisionCaptureFrameAction* release_vision_capture_frame_action();
  ::hedgehog::protocol::proto::VisionCaptureFrameAction* mutable_vision_capture_frame_action();
  void set_allocated_vision_capture_frame_action(::hedgehog::protocol::proto::VisionCaptureFrameAction* value);
  void unsafe_arena_set_allocated_vision_capture_frame_action(::hedgehog::protocol::proto::VisionCaptureFrameAction* value);
  ::hedgehog::protocol::proto::VisionCaptureFrameAction* unsafe_arena_release_vision_capture_frame_action();

  private:
  const ::hedgehog::protocol::proto::VisionCaptureFrameAction& _internal_vision_capture_frame_action() const;
  ::hedgehog::protocol::proto::VisionCaptureFrameAction* _internal_mutable_vision_capture_frame_action();

  public:
  // .hedgehog.protocol.proto.VisionFrameMessage vision_frame_message = 31;
  bool has_vision_frame_message() const;
  private:
  bool _internal_has_vision_frame_message() const;

  public:
  void clear_vision_frame_message() ;
  const ::hedgehog::protocol::proto::VisionFrameMessage& vision_frame_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VisionFrameMessage* release_vision_frame_message();
  ::hedgehog::protocol::proto::VisionFrameMessage* mutable_vision_frame_message();
  void set_allocated_vision_frame_message(::hedgehog::protocol::proto::VisionFrameMessage* value);
  void unsafe_arena_set_allocated_vision_frame_message(::hedgehog::protocol::proto::VisionFrameMessage* value);
  ::hedgehog::protocol::proto::VisionFrameMessage* unsafe_arena_release_vision_frame_message();

  private:
  const ::hedgehog::protocol::proto::VisionFrameMessage& _internal_vision_frame_message() const;
  ::hedgehog::protocol::proto::VisionFrameMessage* _internal_mutable_vision_frame_message();

  public:
  // .hedgehog.protocol.proto.VisionFeatureMessage vision_feature_message = 11;
  bool has_vision_feature_message() const;
  private:
  bool _internal_has_vision_feature_message() const;

  public:
  void clear_vision_feature_message() ;
  const ::hedgehog::protocol::proto::VisionFeatureMessage& vision_feature_message() const;
  PROTOBUF_NODISCARD ::hedgehog::protocol::proto::VisionFeatureMessage* release_vision_feature_message();
  ::hedgehog::protocol::proto::VisionFeatureMessage* mutable_vision_feature_message();
  void set_allocated_vision_feature_message(::hedgehog::protocol::proto::VisionFeatureMessage* value);
  void unsafe_arena_set_allocated_vision_feature_message(::hedgehog::protocol::proto::VisionFeatureMessage* value);
  ::hedgehog::protocol::proto::VisionFeatureMessage* unsafe_arena_release_vision_feature_message();

  private:
  const ::hedgehog::protocol::proto::VisionFeatureMessage& _internal_vision_feature_message() const;
  ::hedgehog::protocol::proto::VisionFeatureMessage* _internal_mutable_vision_feature_message();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.HedgehogMessage)
 private:
  class _Internal;
  void set_has_acknowledgement();
  void set_has_version_message();
  void set_has_emergency_action();
  void set_has_emergency_message();
  void set_has_io_action();
  void set_has_io_command_message();
  void set_has_analog_message();
  void set_has_digital_message();
  void set_has_imu_message();
  void set_has_motor_action();
  void set_has_motor_config_action();
  void set_has_motor_command_message();
  void set_has_motor_state_message();
  void set_has_motor_set_position_action();
  void set_has_servo_action();
  void set_has_servo_command_message();
  void set_has_process_execute_action();
  void set_has_process_execute_reply();
  void set_has_process_stream_message();
  void set_has_process_signal_action();
  void set_has_process_exit_update();
  void set_has_speaker_action();
  void set_has_vision_camera_action();
  void set_has_vision_channel_message();
  void set_has_vision_capture_frame_action();
  void set_has_vision_frame_message();
  void set_has_vision_feature_message();

  inline bool has_payload() const;
  inline void clear_has_payload();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 27, 27,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::hedgehog::protocol::proto::Acknowledgement* acknowledgement_;
      ::hedgehog::protocol::proto::VersionMessage* version_message_;
      ::hedgehog::protocol::proto::EmergencyAction* emergency_action_;
      ::hedgehog::protocol::proto::EmergencyMessage* emergency_message_;
      ::hedgehog::protocol::proto::IOAction* io_action_;
      ::hedgehog::protocol::proto::IOCommandMessage* io_command_message_;
      ::hedgehog::protocol::proto::AnalogMessage* analog_message_;
      ::hedgehog::protocol::proto::DigitalMessage* digital_message_;
      ::hedgehog::protocol::proto::ImuMessage* imu_message_;
      ::hedgehog::protocol::proto::MotorAction* motor_action_;
      ::hedgehog::protocol::proto::MotorConfigAction* motor_config_action_;
      ::hedgehog::protocol::proto::MotorCommandMessage* motor_command_message_;
      ::hedgehog::protocol::proto::MotorStateMessage* motor_state_message_;
      ::hedgehog::protocol::proto::MotorSetPositionAction* motor_set_position_action_;
      ::hedgehog::protocol::proto::ServoAction* servo_action_;
      ::hedgehog::protocol::proto::ServoCommandMessage* servo_command_message_;
      ::hedgehog::protocol::proto::ProcessExecuteAction* process_execute_action_;
      ::hedgehog::protocol::proto::ProcessExecuteReply* process_execute_reply_;
      ::hedgehog::protocol::proto::ProcessStreamMessage* process_stream_message_;
      ::hedgehog::protocol::proto::ProcessSignalAction* process_signal_action_;
      ::hedgehog::protocol::proto::ProcessExitUpdate* process_exit_update_;
      ::hedgehog::protocol::proto::SpeakerAction* speaker_action_;
      ::hedgehog::protocol::proto::VisionCameraAction* vision_camera_action_;
      ::hedgehog::protocol::proto::VisionChannelMessage* vision_channel_message_;
      ::hedgehog::protocol::proto::VisionCaptureFrameAction* vision_capture_frame_action_;
      ::hedgehog::protocol::proto::VisionFrameMessage* vision_frame_message_;
      ::hedgehog::protocol::proto::VisionFeatureMessage* vision_feature_message_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// HedgehogMessage

// .hedgehog.protocol.proto.Acknowledgement acknowledgement = 1;
inline bool HedgehogMessage::has_acknowledgement() const {
  return payload_case() == kAcknowledgement;
}
inline bool HedgehogMessage::_internal_has_acknowledgement() const {
  return payload_case() == kAcknowledgement;
}
inline void HedgehogMessage::set_has_acknowledgement() {
  _impl_._oneof_case_[0] = kAcknowledgement;
}
inline ::hedgehog::protocol::proto::Acknowledgement* HedgehogMessage::release_acknowledgement() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
  if (payload_case() == kAcknowledgement) {
    clear_has_payload();
    auto* temp = _impl_.payload_.acknowledgement_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.acknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::Acknowledgement& HedgehogMessage::_internal_acknowledgement() const {
  return payload_case() == kAcknowledgement ? *_impl_.payload_.acknowledgement_ : reinterpret_cast<::hedgehog::protocol::proto::Acknowledgement&>(::hedgehog::protocol::proto::_Acknowledgement_default_instance_);
}
inline const ::hedgehog::protocol::proto::Acknowledgement& HedgehogMessage::acknowledgement() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
  return _internal_acknowledgement();
}
inline ::hedgehog::protocol::proto::Acknowledgement* HedgehogMessage::unsafe_arena_release_acknowledgement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
  if (payload_case() == kAcknowledgement) {
    clear_has_payload();
    auto* temp = _impl_.payload_.acknowledgement_;
    _impl_.payload_.acknowledgement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_acknowledgement(::hedgehog::protocol::proto::Acknowledgement* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_acknowledgement();
    _impl_.payload_.acknowledgement_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
}
inline ::hedgehog::protocol::proto::Acknowledgement* HedgehogMessage::_internal_mutable_acknowledgement() {
  if (payload_case() != kAcknowledgement) {
    clear_payload();
    set_has_acknowledgement();
    _impl_.payload_.acknowledgement_ = CreateMaybeMessage<::hedgehog::protocol::proto::Acknowledgement>(GetArena());
  }
  return _impl_.payload_.acknowledgement_;
}
inline ::hedgehog::protocol::proto::Acknowledgement* HedgehogMessage::mutable_acknowledgement() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::Acknowledgement* _msg = _internal_mutable_acknowledgement();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
  return _msg;
}

// .hedgehog.protocol.proto.VersionMessage version_message = 26;
inline bool HedgehogMessage::has_version_message() const {
  return payload_case() == kVersionMessage;
}
inline bool HedgehogMessage::_internal_has_version_message() const {
  return payload_case() == kVersionMessage;
}
inline void HedgehogMessage::set_has_version_message() {
  _impl_._oneof_case_[0] = kVersionMessage;
}
inline ::hedgehog::protocol::proto::VersionMessage* HedgehogMessage::release_version_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.version_message)
  if (payload_case() == kVersionMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.version_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.version_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VersionMessage& HedgehogMessage::_internal_version_message() const {
  return payload_case() == kVersionMessage ? *_impl_.payload_.version_message_ : reinterpret_cast<::hedgehog::protocol::proto::VersionMessage&>(::hedgehog::protocol::proto::_VersionMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::VersionMessage& HedgehogMessage::version_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.version_message)
  return _internal_version_message();
}
inline ::hedgehog::protocol::proto::VersionMessage* HedgehogMessage::unsafe_arena_release_version_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.version_message)
  if (payload_case() == kVersionMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.version_message_;
    _impl_.payload_.version_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_version_message(::hedgehog::protocol::proto::VersionMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_version_message();
    _impl_.payload_.version_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.version_message)
}
inline ::hedgehog::protocol::proto::VersionMessage* HedgehogMessage::_internal_mutable_version_message() {
  if (payload_case() != kVersionMessage) {
    clear_payload();
    set_has_version_message();
    _impl_.payload_.version_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VersionMessage>(GetArena());
  }
  return _impl_.payload_.version_message_;
}
inline ::hedgehog::protocol::proto::VersionMessage* HedgehogMessage::mutable_version_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VersionMessage* _msg = _internal_mutable_version_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.version_message)
  return _msg;
}

// .hedgehog.protocol.proto.EmergencyAction emergency_action = 27;
inline bool HedgehogMessage::has_emergency_action() const {
  return payload_case() == kEmergencyAction;
}
inline bool HedgehogMessage::_internal_has_emergency_action() const {
  return payload_case() == kEmergencyAction;
}
inline void HedgehogMessage::set_has_emergency_action() {
  _impl_._oneof_case_[0] = kEmergencyAction;
}
inline ::hedgehog::protocol::proto::EmergencyAction* HedgehogMessage::release_emergency_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
  if (payload_case() == kEmergencyAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.emergency_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.emergency_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::EmergencyAction& HedgehogMessage::_internal_emergency_action() const {
  return payload_case() == kEmergencyAction ? *_impl_.payload_.emergency_action_ : reinterpret_cast<::hedgehog::protocol::proto::EmergencyAction&>(::hedgehog::protocol::proto::_EmergencyAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::EmergencyAction& HedgehogMessage::emergency_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
  return _internal_emergency_action();
}
inline ::hedgehog::protocol::proto::EmergencyAction* HedgehogMessage::unsafe_arena_release_emergency_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
  if (payload_case() == kEmergencyAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.emergency_action_;
    _impl_.payload_.emergency_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_emergency_action(::hedgehog::protocol::proto::EmergencyAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_emergency_action();
    _impl_.payload_.emergency_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
}
inline ::hedgehog::protocol::proto::EmergencyAction* HedgehogMessage::_internal_mutable_emergency_action() {
  if (payload_case() != kEmergencyAction) {
    clear_payload();
    set_has_emergency_action();
    _impl_.payload_.emergency_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::EmergencyAction>(GetArena());
  }
  return _impl_.payload_.emergency_action_;
}
inline ::hedgehog::protocol::proto::EmergencyAction* HedgehogMessage::mutable_emergency_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::EmergencyAction* _msg = _internal_mutable_emergency_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
  return _msg;
}

// .hedgehog.protocol.proto.EmergencyMessage emergency_message = 28;
inline bool HedgehogMessage::has_emergency_message() const {
  return payload_case() == kEmergencyMessage;
}
inline bool HedgehogMessage::_internal_has_emergency_message() const {
  return payload_case() == kEmergencyMessage;
}
inline void HedgehogMessage::set_has_emergency_message() {
  _impl_._oneof_case_[0] = kEmergencyMessage;
}
inline ::hedgehog::protocol::proto::EmergencyMessage* HedgehogMessage::release_emergency_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
  if (payload_case() == kEmergencyMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.emergency_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.emergency_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::EmergencyMessage& HedgehogMessage::_internal_emergency_message() const {
  return payload_case() == kEmergencyMessage ? *_impl_.payload_.emergency_message_ : reinterpret_cast<::hedgehog::protocol::proto::EmergencyMessage&>(::hedgehog::protocol::proto::_EmergencyMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::EmergencyMessage& HedgehogMessage::emergency_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
  return _internal_emergency_message();
}
inline ::hedgehog::protocol::proto::EmergencyMessage* HedgehogMessage::unsafe_arena_release_emergency_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
  if (payload_case() == kEmergencyMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.emergency_message_;
    _impl_.payload_.emergency_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_emergency_message(::hedgehog::protocol::proto::EmergencyMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_emergency_message();
    _impl_.payload_.emergency_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
}
inline ::hedgehog::protocol::proto::EmergencyMessage* HedgehogMessage::_internal_mutable_emergency_message() {
  if (payload_case() != kEmergencyMessage) {
    clear_payload();
    set_has_emergency_message();
    _impl_.payload_.emergency_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::EmergencyMessage>(GetArena());
  }
  return _impl_.payload_.emergency_message_;
}
inline ::hedgehog::protocol::proto::EmergencyMessage* HedgehogMessage::mutable_emergency_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::EmergencyMessage* _msg = _internal_mutable_emergency_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
  return _msg;
}

// .hedgehog.protocol.proto.IOAction io_action = 2;
inline bool HedgehogMessage::has_io_action() const {
  return payload_case() == kIoAction;
}
inline bool HedgehogMessage::_internal_has_io_action() const {
  return payload_case() == kIoAction;
}
inline void HedgehogMessage::set_has_io_action() {
  _impl_._oneof_case_[0] = kIoAction;
}
inline ::hedgehog::protocol::proto::IOAction* HedgehogMessage::release_io_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.io_action)
  if (payload_case() == kIoAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.io_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.io_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::IOAction& HedgehogMessage::_internal_io_action() const {
  return payload_case() == kIoAction ? *_impl_.payload_.io_action_ : reinterpret_cast<::hedgehog::protocol::proto::IOAction&>(::hedgehog::protocol::proto::_IOAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::IOAction& HedgehogMessage::io_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.io_action)
  return _internal_io_action();
}
inline ::hedgehog::protocol::proto::IOAction* HedgehogMessage::unsafe_arena_release_io_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.io_action)
  if (payload_case() == kIoAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.io_action_;
    _impl_.payload_.io_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_io_action(::hedgehog::protocol::proto::IOAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_io_action();
    _impl_.payload_.io_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.io_action)
}
inline ::hedgehog::protocol::proto::IOAction* HedgehogMessage::_internal_mutable_io_action() {
  if (payload_case() != kIoAction) {
    clear_payload();
    set_has_io_action();
    _impl_.payload_.io_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::IOAction>(GetArena());
  }
  return _impl_.payload_.io_action_;
}
inline ::hedgehog::protocol::proto::IOAction* HedgehogMessage::mutable_io_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::IOAction* _msg = _internal_mutable_io_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.io_action)
  return _msg;
}

// .hedgehog.protocol.proto.IOCommandMessage io_command_message = 16;
inline bool HedgehogMessage::has_io_command_message() const {
  return payload_case() == kIoCommandMessage;
}
inline bool HedgehogMessage::_internal_has_io_command_message() const {
  return payload_case() == kIoCommandMessage;
}
inline void HedgehogMessage::set_has_io_command_message() {
  _impl_._oneof_case_[0] = kIoCommandMessage;
}
inline ::hedgehog::protocol::proto::IOCommandMessage* HedgehogMessage::release_io_command_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
  if (payload_case() == kIoCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.io_command_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.io_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::IOCommandMessage& HedgehogMessage::_internal_io_command_message() const {
  return payload_case() == kIoCommandMessage ? *_impl_.payload_.io_command_message_ : reinterpret_cast<::hedgehog::protocol::proto::IOCommandMessage&>(::hedgehog::protocol::proto::_IOCommandMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::IOCommandMessage& HedgehogMessage::io_command_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
  return _internal_io_command_message();
}
inline ::hedgehog::protocol::proto::IOCommandMessage* HedgehogMessage::unsafe_arena_release_io_command_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
  if (payload_case() == kIoCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.io_command_message_;
    _impl_.payload_.io_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_io_command_message(::hedgehog::protocol::proto::IOCommandMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_io_command_message();
    _impl_.payload_.io_command_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
}
inline ::hedgehog::protocol::proto::IOCommandMessage* HedgehogMessage::_internal_mutable_io_command_message() {
  if (payload_case() != kIoCommandMessage) {
    clear_payload();
    set_has_io_command_message();
    _impl_.payload_.io_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::IOCommandMessage>(GetArena());
  }
  return _impl_.payload_.io_command_message_;
}
inline ::hedgehog::protocol::proto::IOCommandMessage* HedgehogMessage::mutable_io_command_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::IOCommandMessage* _msg = _internal_mutable_io_command_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
  return _msg;
}

// .hedgehog.protocol.proto.AnalogMessage analog_message = 3;
inline bool HedgehogMessage::has_analog_message() const {
  return payload_case() == kAnalogMessage;
}
inline bool HedgehogMessage::_internal_has_analog_message() const {
  return payload_case() == kAnalogMessage;
}
inline void HedgehogMessage::set_has_analog_message() {
  _impl_._oneof_case_[0] = kAnalogMessage;
}
inline ::hedgehog::protocol::proto::AnalogMessage* HedgehogMessage::release_analog_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.analog_message)
  if (payload_case() == kAnalogMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.analog_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.analog_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::AnalogMessage& HedgehogMessage::_internal_analog_message() const {
  return payload_case() == kAnalogMessage ? *_impl_.payload_.analog_message_ : reinterpret_cast<::hedgehog::protocol::proto::AnalogMessage&>(::hedgehog::protocol::proto::_AnalogMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::AnalogMessage& HedgehogMessage::analog_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.analog_message)
  return _internal_analog_message();
}
inline ::hedgehog::protocol::proto::AnalogMessage* HedgehogMessage::unsafe_arena_release_analog_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.analog_message)
  if (payload_case() == kAnalogMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.analog_message_;
    _impl_.payload_.analog_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_analog_message(::hedgehog::protocol::proto::AnalogMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_analog_message();
    _impl_.payload_.analog_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.analog_message)
}
inline ::hedgehog::protocol::proto::AnalogMessage* HedgehogMessage::_internal_mutable_analog_message() {
  if (payload_case() != kAnalogMessage) {
    clear_payload();
    set_has_analog_message();
    _impl_.payload_.analog_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::AnalogMessage>(GetArena());
  }
  return _impl_.payload_.analog_message_;
}
inline ::hedgehog::protocol::proto::AnalogMessage* HedgehogMessage::mutable_analog_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::AnalogMessage* _msg = _internal_mutable_analog_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.analog_message)
  return _msg;
}

// .hedgehog.protocol.proto.DigitalMessage digital_message = 4;
inline bool HedgehogMessage::has_digital_message() const {
  return payload_case() == kDigitalMessage;
}
inline bool HedgehogMessage::_internal_has_digital_message() const {
  return payload_case() == kDigitalMessage;
}
inline void HedgehogMessage::set_has_digital_message() {
  _impl_._oneof_case_[0] = kDigitalMessage;
}
inline ::hedgehog::protocol::proto::DigitalMessage* HedgehogMessage::release_digital_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.digital_message)
  if (payload_case() == kDigitalMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.digital_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.digital_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::DigitalMessage& HedgehogMessage::_internal_digital_message() const {
  return payload_case() == kDigitalMessage ? *_impl_.payload_.digital_message_ : reinterpret_cast<::hedgehog::protocol::proto::DigitalMessage&>(::hedgehog::protocol::proto::_DigitalMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::DigitalMessage& HedgehogMessage::digital_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.digital_message)
  return _internal_digital_message();
}
inline ::hedgehog::protocol::proto::DigitalMessage* HedgehogMessage::unsafe_arena_release_digital_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.digital_message)
  if (payload_case() == kDigitalMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.digital_message_;
    _impl_.payload_.digital_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_digital_message(::hedgehog::protocol::proto::DigitalMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_digital_message();
    _impl_.payload_.digital_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.digital_message)
}
inline ::hedgehog::protocol::proto::DigitalMessage* HedgehogMessage::_internal_mutable_digital_message() {
  if (payload_case() != kDigitalMessage) {
    clear_payload();
    set_has_digital_message();
    _impl_.payload_.digital_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::DigitalMessage>(GetArena());
  }
  return _impl_.payload_.digital_message_;
}
inline ::hedgehog::protocol::proto::DigitalMessage* HedgehogMessage::mutable_digital_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::DigitalMessage* _msg = _internal_mutable_digital_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.digital_message)
  return _msg;
}

// .hedgehog.protocol.proto.ImuMessage imu_message = 9;
inline bool HedgehogMessage::has_imu_message() const {
  return payload_case() == kImuMessage;
}
inline bool HedgehogMessage::_internal_has_imu_message() const {
  return payload_case() == kImuMessage;
}
inline void HedgehogMessage::set_has_imu_message() {
  _impl_._oneof_case_[0] = kImuMessage;
}
inline ::hedgehog::protocol::proto::ImuMessage* HedgehogMessage::release_imu_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.imu_message)
  if (payload_case() == kImuMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.imu_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.imu_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ImuMessage& HedgehogMessage::_internal_imu_message() const {
  return payload_case() == kImuMessage ? *_impl_.payload_.imu_message_ : reinterpret_cast<::hedgehog::protocol::proto::ImuMessage&>(::hedgehog::protocol::proto::_ImuMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::ImuMessage& HedgehogMessage::imu_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.imu_message)
  return _internal_imu_message();
}
inline ::hedgehog::protocol::proto::ImuMessage* HedgehogMessage::unsafe_arena_release_imu_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.imu_message)
  if (payload_case() == kImuMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.imu_message_;
    _impl_.payload_.imu_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_imu_message(::hedgehog::protocol::proto::ImuMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_imu_message();
    _impl_.payload_.imu_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.imu_message)
}
inline ::hedgehog::protocol::proto::ImuMessage* HedgehogMessage::_internal_mutable_imu_message() {
  if (payload_case() != kImuMessage) {
    clear_payload();
    set_has_imu_message();
    _impl_.payload_.imu_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ImuMessage>(GetArena());
  }
  return _impl_.payload_.imu_message_;
}
inline ::hedgehog::protocol::proto::ImuMessage* HedgehogMessage::mutable_imu_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ImuMessage* _msg = _internal_mutable_imu_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.imu_message)
  return _msg;
}

// .hedgehog.protocol.proto.MotorAction motor_action = 5;
inline bool HedgehogMessage::has_motor_action() const {
  return payload_case() == kMotorAction;
}
inline bool HedgehogMessage::_internal_has_motor_action() const {
  return payload_case() == kMotorAction;
}
inline void HedgehogMessage::set_has_motor_action() {
  _impl_._oneof_case_[0] = kMotorAction;
}
inline ::hedgehog::protocol::proto::MotorAction* HedgehogMessage::release_motor_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.motor_action)
  if (payload_case() == kMotorAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.motor_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::MotorAction& HedgehogMessage::_internal_motor_action() const {
  return payload_case() == kMotorAction ? *_impl_.payload_.motor_action_ : reinterpret_cast<::hedgehog::protocol::proto::MotorAction&>(::hedgehog::protocol::proto::_MotorAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::MotorAction& HedgehogMessage::motor_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.motor_action)
  return _internal_motor_action();
}
inline ::hedgehog::protocol::proto::MotorAction* HedgehogMessage::unsafe_arena_release_motor_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.motor_action)
  if (payload_case() == kMotorAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_action_;
    _impl_.payload_.motor_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_motor_action(::hedgehog::protocol::proto::MotorAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_motor_action();
    _impl_.payload_.motor_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_action)
}
inline ::hedgehog::protocol::proto::MotorAction* HedgehogMessage::_internal_mutable_motor_action() {
  if (payload_case() != kMotorAction) {
    clear_payload();
    set_has_motor_action();
    _impl_.payload_.motor_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorAction>(GetArena());
  }
  return _impl_.payload_.motor_action_;
}
inline ::hedgehog::protocol::proto::MotorAction* HedgehogMessage::mutable_motor_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::MotorAction* _msg = _internal_mutable_motor_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.motor_action)
  return _msg;
}

// .hedgehog.protocol.proto.MotorConfigAction motor_config_action = 24;
inline bool HedgehogMessage::has_motor_config_action() const {
  return payload_case() == kMotorConfigAction;
}
inline bool HedgehogMessage::_internal_has_motor_config_action() const {
  return payload_case() == kMotorConfigAction;
}
inline void HedgehogMessage::set_has_motor_config_action() {
  _impl_._oneof_case_[0] = kMotorConfigAction;
}
inline ::hedgehog::protocol::proto::MotorConfigAction* HedgehogMessage::release_motor_config_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
  if (payload_case() == kMotorConfigAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_config_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.motor_config_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::MotorConfigAction& HedgehogMessage::_internal_motor_config_action() const {
  return payload_case() == kMotorConfigAction ? *_impl_.payload_.motor_config_action_ : reinterpret_cast<::hedgehog::protocol::proto::MotorConfigAction&>(::hedgehog::protocol::proto::_MotorConfigAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::MotorConfigAction& HedgehogMessage::motor_config_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
  return _internal_motor_config_action();
}
inline ::hedgehog::protocol::proto::MotorConfigAction* HedgehogMessage::unsafe_arena_release_motor_config_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
  if (payload_case() == kMotorConfigAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_config_action_;
    _impl_.payload_.motor_config_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_motor_config_action(::hedgehog::protocol::proto::MotorConfigAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_motor_config_action();
    _impl_.payload_.motor_config_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
}
inline ::hedgehog::protocol::proto::MotorConfigAction* HedgehogMessage::_internal_mutable_motor_config_action() {
  if (payload_case() != kMotorConfigAction) {
    clear_payload();
    set_has_motor_config_action();
    _impl_.payload_.motor_config_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorConfigAction>(GetArena());
  }
  return _impl_.payload_.motor_config_action_;
}
inline ::hedgehog::protocol::proto::MotorConfigAction* HedgehogMessage::mutable_motor_config_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::MotorConfigAction* _msg = _internal_mutable_motor_config_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
  return _msg;
}

// .hedgehog.protocol.proto.MotorCommandMessage motor_command_message = 17;
inline bool HedgehogMessage::has_motor_command_message() const {
  return payload_case() == kMotorCommandMessage;
}
inline bool HedgehogMessage::_internal_has_motor_command_message() const {
  return payload_case() == kMotorCommandMessage;
}
inline void HedgehogMessage::set_has_motor_command_message() {
  _impl_._oneof_case_[0] = kMotorCommandMessage;
}
inline ::hedgehog::protocol::proto::MotorCommandMessage* HedgehogMessage::release_motor_command_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
  if (payload_case() == kMotorCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_command_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.motor_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::MotorCommandMessage& HedgehogMessage::_internal_motor_command_message() const {
  return payload_case() == kMotorCommandMessage ? *_impl_.payload_.motor_command_message_ : reinterpret_cast<::hedgehog::protocol::proto::MotorCommandMessage&>(::hedgehog::protocol::proto::_MotorCommandMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::MotorCommandMessage& HedgehogMessage::motor_command_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
  return _internal_motor_command_message();
}
inline ::hedgehog::protocol::proto::MotorCommandMessage* HedgehogMessage::unsafe_arena_release_motor_command_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
  if (payload_case() == kMotorCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_command_message_;
    _impl_.payload_.motor_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_motor_command_message(::hedgehog::protocol::proto::MotorCommandMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_motor_command_message();
    _impl_.payload_.motor_command_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
}
inline ::hedgehog::protocol::proto::MotorCommandMessage* HedgehogMessage::_internal_mutable_motor_command_message() {
  if (payload_case() != kMotorCommandMessage) {
    clear_payload();
    set_has_motor_command_message();
    _impl_.payload_.motor_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorCommandMessage>(GetArena());
  }
  return _impl_.payload_.motor_command_message_;
}
inline ::hedgehog::protocol::proto::MotorCommandMessage* HedgehogMessage::mutable_motor_command_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::MotorCommandMessage* _msg = _internal_mutable_motor_command_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
  return _msg;
}

// .hedgehog.protocol.proto.MotorStateMessage motor_state_message = 6;
inline bool HedgehogMessage::has_motor_state_message() const {
  return payload_case() == kMotorStateMessage;
}
inline bool HedgehogMessage::_internal_has_motor_state_message() const {
  return payload_case() == kMotorStateMessage;
}
inline void HedgehogMessage::set_has_motor_state_message() {
  _impl_._oneof_case_[0] = kMotorStateMessage;
}
inline ::hedgehog::protocol::proto::MotorStateMessage* HedgehogMessage::release_motor_state_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
  if (payload_case() == kMotorStateMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_state_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.motor_state_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::MotorStateMessage& HedgehogMessage::_internal_motor_state_message() const {
  return payload_case() == kMotorStateMessage ? *_impl_.payload_.motor_state_message_ : reinterpret_cast<::hedgehog::protocol::proto::MotorStateMessage&>(::hedgehog::protocol::proto::_MotorStateMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::MotorStateMessage& HedgehogMessage::motor_state_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
  return _internal_motor_state_message();
}
inline ::hedgehog::protocol::proto::MotorStateMessage* HedgehogMessage::unsafe_arena_release_motor_state_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
  if (payload_case() == kMotorStateMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_state_message_;
    _impl_.payload_.motor_state_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_motor_state_message(::hedgehog::protocol::proto::MotorStateMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_motor_state_message();
    _impl_.payload_.motor_state_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
}
inline ::hedgehog::protocol::proto::MotorStateMessage* HedgehogMessage::_internal_mutable_motor_state_message() {
  if (payload_case() != kMotorStateMessage) {
    clear_payload();
    set_has_motor_state_message();
    _impl_.payload_.motor_state_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorStateMessage>(GetArena());
  }
  return _impl_.payload_.motor_state_message_;
}
inline ::hedgehog::protocol::proto::MotorStateMessage* HedgehogMessage::mutable_motor_state_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::MotorStateMessage* _msg = _internal_mutable_motor_state_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
  return _msg;
}

// .hedgehog.protocol.proto.MotorSetPositionAction motor_set_position_action = 18;
inline bool HedgehogMessage::has_motor_set_position_action() const {
  return payload_case() == kMotorSetPositionAction;
}
inline bool HedgehogMessage::_internal_has_motor_set_position_action() const {
  return payload_case() == kMotorSetPositionAction;
}
inline void HedgehogMessage::set_has_motor_set_position_action() {
  _impl_._oneof_case_[0] = kMotorSetPositionAction;
}
inline ::hedgehog::protocol::proto::MotorSetPositionAction* HedgehogMessage::release_motor_set_position_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
  if (payload_case() == kMotorSetPositionAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_set_position_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.motor_set_position_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::MotorSetPositionAction& HedgehogMessage::_internal_motor_set_position_action() const {
  return payload_case() == kMotorSetPositionAction ? *_impl_.payload_.motor_set_position_action_ : reinterpret_cast<::hedgehog::protocol::proto::MotorSetPositionAction&>(::hedgehog::protocol::proto::_MotorSetPositionAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::MotorSetPositionAction& HedgehogMessage::motor_set_position_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
  return _internal_motor_set_position_action();
}
inline ::hedgehog::protocol::proto::MotorSetPositionAction* HedgehogMessage::unsafe_arena_release_motor_set_position_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
  if (payload_case() == kMotorSetPositionAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.motor_set_position_action_;
    _impl_.payload_.motor_set_position_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_motor_set_position_action(::hedgehog::protocol::proto::MotorSetPositionAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_motor_set_position_action();
    _impl_.payload_.motor_set_position_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
}
inline ::hedgehog::protocol::proto::MotorSetPositionAction* HedgehogMessage::_internal_mutable_motor_set_position_action() {
  if (payload_case() != kMotorSetPositionAction) {
    clear_payload();
    set_has_motor_set_position_action();
    _impl_.payload_.motor_set_position_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorSetPositionAction>(GetArena());
  }
  return _impl_.payload_.motor_set_position_action_;
}
inline ::hedgehog::protocol::proto::MotorSetPositionAction* HedgehogMessage::mutable_motor_set_position_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::MotorSetPositionAction* _msg = _internal_mutable_motor_set_position_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
  return _msg;
}

// .hedgehog.protocol.proto.ServoAction servo_action = 7;
inline bool HedgehogMessage::has_servo_action() const {
  return payload_case() == kServoAction;
}
inline bool HedgehogMessage::_internal_has_servo_action() const {
  return payload_case() == kServoAction;
}
inline void HedgehogMessage::set_has_servo_action() {
  _impl_._oneof_case_[0] = kServoAction;
}
inline ::hedgehog::protocol::proto::ServoAction* HedgehogMessage::release_servo_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.servo_action)
  if (payload_case() == kServoAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.servo_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.servo_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ServoAction& HedgehogMessage::_internal_servo_action() const {
  return payload_case() == kServoAction ? *_impl_.payload_.servo_action_ : reinterpret_cast<::hedgehog::protocol::proto::ServoAction&>(::hedgehog::protocol::proto::_ServoAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::ServoAction& HedgehogMessage::servo_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.servo_action)
  return _internal_servo_action();
}
inline ::hedgehog::protocol::proto::ServoAction* HedgehogMessage::unsafe_arena_release_servo_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.servo_action)
  if (payload_case() == kServoAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.servo_action_;
    _impl_.payload_.servo_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_servo_action(::hedgehog::protocol::proto::ServoAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_servo_action();
    _impl_.payload_.servo_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.servo_action)
}
inline ::hedgehog::protocol::proto::ServoAction* HedgehogMessage::_internal_mutable_servo_action() {
  if (payload_case() != kServoAction) {
    clear_payload();
    set_has_servo_action();
    _impl_.payload_.servo_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ServoAction>(GetArena());
  }
  return _impl_.payload_.servo_action_;
}
inline ::hedgehog::protocol::proto::ServoAction* HedgehogMessage::mutable_servo_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ServoAction* _msg = _internal_mutable_servo_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.servo_action)
  return _msg;
}

// .hedgehog.protocol.proto.ServoCommandMessage servo_command_message = 19;
inline bool HedgehogMessage::has_servo_command_message() const {
  return payload_case() == kServoCommandMessage;
}
inline bool HedgehogMessage::_internal_has_servo_command_message() const {
  return payload_case() == kServoCommandMessage;
}
inline void HedgehogMessage::set_has_servo_command_message() {
  _impl_._oneof_case_[0] = kServoCommandMessage;
}
inline ::hedgehog::protocol::proto::ServoCommandMessage* HedgehogMessage::release_servo_command_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
  if (payload_case() == kServoCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.servo_command_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.servo_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ServoCommandMessage& HedgehogMessage::_internal_servo_command_message() const {
  return payload_case() == kServoCommandMessage ? *_impl_.payload_.servo_command_message_ : reinterpret_cast<::hedgehog::protocol::proto::ServoCommandMessage&>(::hedgehog::protocol::proto::_ServoCommandMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::ServoCommandMessage& HedgehogMessage::servo_command_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
  return _internal_servo_command_message();
}
inline ::hedgehog::protocol::proto::ServoCommandMessage* HedgehogMessage::unsafe_arena_release_servo_command_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
  if (payload_case() == kServoCommandMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.servo_command_message_;
    _impl_.payload_.servo_command_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_servo_command_message(::hedgehog::protocol::proto::ServoCommandMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_servo_command_message();
    _impl_.payload_.servo_command_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
}
inline ::hedgehog::protocol::proto::ServoCommandMessage* HedgehogMessage::_internal_mutable_servo_command_message() {
  if (payload_case() != kServoCommandMessage) {
    clear_payload();
    set_has_servo_command_message();
    _impl_.payload_.servo_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ServoCommandMessage>(GetArena());
  }
  return _impl_.payload_.servo_command_message_;
}
inline ::hedgehog::protocol::proto::ServoCommandMessage* HedgehogMessage::mutable_servo_command_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ServoCommandMessage* _msg = _internal_mutable_servo_command_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
  return _msg;
}

// .hedgehog.protocol.proto.ProcessExecuteAction process_execute_action = 20;
inline bool HedgehogMessage::has_process_execute_action() const {
  return payload_case() == kProcessExecuteAction;
}
inline bool HedgehogMessage::_internal_has_process_execute_action() const {
  return payload_case() == kProcessExecuteAction;
}
inline void HedgehogMessage::set_has_process_execute_action() {
  _impl_._oneof_case_[0] = kProcessExecuteAction;
}
inline ::hedgehog::protocol::proto::ProcessExecuteAction* HedgehogMessage::release_process_execute_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
  if (payload_case() == kProcessExecuteAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_execute_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.process_execute_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ProcessExecuteAction& HedgehogMessage::_internal_process_execute_action() const {
  return payload_case() == kProcessExecuteAction ? *_impl_.payload_.process_execute_action_ : reinterpret_cast<::hedgehog::protocol::proto::ProcessExecuteAction&>(::hedgehog::protocol::proto::_ProcessExecuteAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::ProcessExecuteAction& HedgehogMessage::process_execute_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
  return _internal_process_execute_action();
}
inline ::hedgehog::protocol::proto::ProcessExecuteAction* HedgehogMessage::unsafe_arena_release_process_execute_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
  if (payload_case() == kProcessExecuteAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_execute_action_;
    _impl_.payload_.process_execute_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_process_execute_action(::hedgehog::protocol::proto::ProcessExecuteAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_process_execute_action();
    _impl_.payload_.process_execute_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
}
inline ::hedgehog::protocol::proto::ProcessExecuteAction* HedgehogMessage::_internal_mutable_process_execute_action() {
  if (payload_case() != kProcessExecuteAction) {
    clear_payload();
    set_has_process_execute_action();
    _impl_.payload_.process_execute_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExecuteAction>(GetArena());
  }
  return _impl_.payload_.process_execute_action_;
}
inline ::hedgehog::protocol::proto::ProcessExecuteAction* HedgehogMessage::mutable_process_execute_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ProcessExecuteAction* _msg = _internal_mutable_process_execute_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
  return _msg;
}

// .hedgehog.protocol.proto.ProcessExecuteReply process_execute_reply = 21;
inline bool HedgehogMessage::has_process_execute_reply() const {
  return payload_case() == kProcessExecuteReply;
}
inline bool HedgehogMessage::_internal_has_process_execute_reply() const {
  return payload_case() == kProcessExecuteReply;
}
inline void HedgehogMessage::set_has_process_execute_reply() {
  _impl_._oneof_case_[0] = kProcessExecuteReply;
}
inline ::hedgehog::protocol::proto::ProcessExecuteReply* HedgehogMessage::release_process_execute_reply() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
  if (payload_case() == kProcessExecuteReply) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_execute_reply_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.process_execute_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ProcessExecuteReply& HedgehogMessage::_internal_process_execute_reply() const {
  return payload_case() == kProcessExecuteReply ? *_impl_.payload_.process_execute_reply_ : reinterpret_cast<::hedgehog::protocol::proto::ProcessExecuteReply&>(::hedgehog::protocol::proto::_ProcessExecuteReply_default_instance_);
}
inline const ::hedgehog::protocol::proto::ProcessExecuteReply& HedgehogMessage::process_execute_reply() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
  return _internal_process_execute_reply();
}
inline ::hedgehog::protocol::proto::ProcessExecuteReply* HedgehogMessage::unsafe_arena_release_process_execute_reply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
  if (payload_case() == kProcessExecuteReply) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_execute_reply_;
    _impl_.payload_.process_execute_reply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_process_execute_reply(::hedgehog::protocol::proto::ProcessExecuteReply* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_process_execute_reply();
    _impl_.payload_.process_execute_reply_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
}
inline ::hedgehog::protocol::proto::ProcessExecuteReply* HedgehogMessage::_internal_mutable_process_execute_reply() {
  if (payload_case() != kProcessExecuteReply) {
    clear_payload();
    set_has_process_execute_reply();
    _impl_.payload_.process_execute_reply_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExecuteReply>(GetArena());
  }
  return _impl_.payload_.process_execute_reply_;
}
inline ::hedgehog::protocol::proto::ProcessExecuteReply* HedgehogMessage::mutable_process_execute_reply() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ProcessExecuteReply* _msg = _internal_mutable_process_execute_reply();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
  return _msg;
}

// .hedgehog.protocol.proto.ProcessStreamMessage process_stream_message = 8;
inline bool HedgehogMessage::has_process_stream_message() const {
  return payload_case() == kProcessStreamMessage;
}
inline bool HedgehogMessage::_internal_has_process_stream_message() const {
  return payload_case() == kProcessStreamMessage;
}
inline void HedgehogMessage::set_has_process_stream_message() {
  _impl_._oneof_case_[0] = kProcessStreamMessage;
}
inline ::hedgehog::protocol::proto::ProcessStreamMessage* HedgehogMessage::release_process_stream_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
  if (payload_case() == kProcessStreamMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_stream_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.process_stream_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ProcessStreamMessage& HedgehogMessage::_internal_process_stream_message() const {
  return payload_case() == kProcessStreamMessage ? *_impl_.payload_.process_stream_message_ : reinterpret_cast<::hedgehog::protocol::proto::ProcessStreamMessage&>(::hedgehog::protocol::proto::_ProcessStreamMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::ProcessStreamMessage& HedgehogMessage::process_stream_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
  return _internal_process_stream_message();
}
inline ::hedgehog::protocol::proto::ProcessStreamMessage* HedgehogMessage::unsafe_arena_release_process_stream_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
  if (payload_case() == kProcessStreamMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_stream_message_;
    _impl_.payload_.process_stream_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_process_stream_message(::hedgehog::protocol::proto::ProcessStreamMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_process_stream_message();
    _impl_.payload_.process_stream_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
}
inline ::hedgehog::protocol::proto::ProcessStreamMessage* HedgehogMessage::_internal_mutable_process_stream_message() {
  if (payload_case() != kProcessStreamMessage) {
    clear_payload();
    set_has_process_stream_message();
    _impl_.payload_.process_stream_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessStreamMessage>(GetArena());
  }
  return _impl_.payload_.process_stream_message_;
}
inline ::hedgehog::protocol::proto::ProcessStreamMessage* HedgehogMessage::mutable_process_stream_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ProcessStreamMessage* _msg = _internal_mutable_process_stream_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
  return _msg;
}

// .hedgehog.protocol.proto.ProcessSignalAction process_signal_action = 22;
inline bool HedgehogMessage::has_process_signal_action() const {
  return payload_case() == kProcessSignalAction;
}
inline bool HedgehogMessage::_internal_has_process_signal_action() const {
  return payload_case() == kProcessSignalAction;
}
inline void HedgehogMessage::set_has_process_signal_action() {
  _impl_._oneof_case_[0] = kProcessSignalAction;
}
inline ::hedgehog::protocol::proto::ProcessSignalAction* HedgehogMessage::release_process_signal_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
  if (payload_case() == kProcessSignalAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_signal_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.process_signal_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ProcessSignalAction& HedgehogMessage::_internal_process_signal_action() const {
  return payload_case() == kProcessSignalAction ? *_impl_.payload_.process_signal_action_ : reinterpret_cast<::hedgehog::protocol::proto::ProcessSignalAction&>(::hedgehog::protocol::proto::_ProcessSignalAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::ProcessSignalAction& HedgehogMessage::process_signal_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
  return _internal_process_signal_action();
}
inline ::hedgehog::protocol::proto::ProcessSignalAction* HedgehogMessage::unsafe_arena_release_process_signal_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
  if (payload_case() == kProcessSignalAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_signal_action_;
    _impl_.payload_.process_signal_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_process_signal_action(::hedgehog::protocol::proto::ProcessSignalAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_process_signal_action();
    _impl_.payload_.process_signal_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
}
inline ::hedgehog::protocol::proto::ProcessSignalAction* HedgehogMessage::_internal_mutable_process_signal_action() {
  if (payload_case() != kProcessSignalAction) {
    clear_payload();
    set_has_process_signal_action();
    _impl_.payload_.process_signal_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessSignalAction>(GetArena());
  }
  return _impl_.payload_.process_signal_action_;
}
inline ::hedgehog::protocol::proto::ProcessSignalAction* HedgehogMessage::mutable_process_signal_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ProcessSignalAction* _msg = _internal_mutable_process_signal_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
  return _msg;
}

// .hedgehog.protocol.proto.ProcessExitUpdate process_exit_update = 23;
inline bool HedgehogMessage::has_process_exit_update() const {
  return payload_case() == kProcessExitUpdate;
}
inline bool HedgehogMessage::_internal_has_process_exit_update() const {
  return payload_case() == kProcessExitUpdate;
}
inline void HedgehogMessage::set_has_process_exit_update() {
  _impl_._oneof_case_[0] = kProcessExitUpdate;
}
inline ::hedgehog::protocol::proto::ProcessExitUpdate* HedgehogMessage::release_process_exit_update() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
  if (payload_case() == kProcessExitUpdate) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_exit_update_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.process_exit_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::ProcessExitUpdate& HedgehogMessage::_internal_process_exit_update() const {
  return payload_case() == kProcessExitUpdate ? *_impl_.payload_.process_exit_update_ : reinterpret_cast<::hedgehog::protocol::proto::ProcessExitUpdate&>(::hedgehog::protocol::proto::_ProcessExitUpdate_default_instance_);
}
inline const ::hedgehog::protocol::proto::ProcessExitUpdate& HedgehogMessage::process_exit_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
  return _internal_process_exit_update();
}
inline ::hedgehog::protocol::proto::ProcessExitUpdate* HedgehogMessage::unsafe_arena_release_process_exit_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
  if (payload_case() == kProcessExitUpdate) {
    clear_has_payload();
    auto* temp = _impl_.payload_.process_exit_update_;
    _impl_.payload_.process_exit_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_process_exit_update(::hedgehog::protocol::proto::ProcessExitUpdate* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_process_exit_update();
    _impl_.payload_.process_exit_update_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
}
inline ::hedgehog::protocol::proto::ProcessExitUpdate* HedgehogMessage::_internal_mutable_process_exit_update() {
  if (payload_case() != kProcessExitUpdate) {
    clear_payload();
    set_has_process_exit_update();
    _impl_.payload_.process_exit_update_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExitUpdate>(GetArena());
  }
  return _impl_.payload_.process_exit_update_;
}
inline ::hedgehog::protocol::proto::ProcessExitUpdate* HedgehogMessage::mutable_process_exit_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::ProcessExitUpdate* _msg = _internal_mutable_process_exit_update();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
  return _msg;
}

// .hedgehog.protocol.proto.SpeakerAction speaker_action = 25;
inline bool HedgehogMessage::has_speaker_action() const {
  return payload_case() == kSpeakerAction;
}
inline bool HedgehogMessage::_internal_has_speaker_action() const {
  return payload_case() == kSpeakerAction;
}
inline void HedgehogMessage::set_has_speaker_action() {
  _impl_._oneof_case_[0] = kSpeakerAction;
}
inline ::hedgehog::protocol::proto::SpeakerAction* HedgehogMessage::release_speaker_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
  if (payload_case() == kSpeakerAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.speaker_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.speaker_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::SpeakerAction& HedgehogMessage::_internal_speaker_action() const {
  return payload_case() == kSpeakerAction ? *_impl_.payload_.speaker_action_ : reinterpret_cast<::hedgehog::protocol::proto::SpeakerAction&>(::hedgehog::protocol::proto::_SpeakerAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::SpeakerAction& HedgehogMessage::speaker_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
  return _internal_speaker_action();
}
inline ::hedgehog::protocol::proto::SpeakerAction* HedgehogMessage::unsafe_arena_release_speaker_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
  if (payload_case() == kSpeakerAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.speaker_action_;
    _impl_.payload_.speaker_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_speaker_action(::hedgehog::protocol::proto::SpeakerAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_speaker_action();
    _impl_.payload_.speaker_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
}
inline ::hedgehog::protocol::proto::SpeakerAction* HedgehogMessage::_internal_mutable_speaker_action() {
  if (payload_case() != kSpeakerAction) {
    clear_payload();
    set_has_speaker_action();
    _impl_.payload_.speaker_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::SpeakerAction>(GetArena());
  }
  return _impl_.payload_.speaker_action_;
}
inline ::hedgehog::protocol::proto::SpeakerAction* HedgehogMessage::mutable_speaker_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::SpeakerAction* _msg = _internal_mutable_speaker_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
  return _msg;
}

// .hedgehog.protocol.proto.VisionCameraAction vision_camera_action = 29;
inline bool HedgehogMessage::has_vision_camera_action() const {
  return payload_case() == kVisionCameraAction;
}
inline bool HedgehogMessage::_internal_has_vision_camera_action() const {
  return payload_case() == kVisionCameraAction;
}
inline void HedgehogMessage::set_has_vision_camera_action() {
  _impl_._oneof_case_[0] = kVisionCameraAction;
}
inline ::hedgehog::protocol::proto::VisionCameraAction* HedgehogMessage::release_vision_camera_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
  if (payload_case() == kVisionCameraAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_camera_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vision_camera_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VisionCameraAction& HedgehogMessage::_internal_vision_camera_action() const {
  return payload_case() == kVisionCameraAction ? *_impl_.payload_.vision_camera_action_ : reinterpret_cast<::hedgehog::protocol::proto::VisionCameraAction&>(::hedgehog::protocol::proto::_VisionCameraAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::VisionCameraAction& HedgehogMessage::vision_camera_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
  return _internal_vision_camera_action();
}
inline ::hedgehog::protocol::proto::VisionCameraAction* HedgehogMessage::unsafe_arena_release_vision_camera_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
  if (payload_case() == kVisionCameraAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_camera_action_;
    _impl_.payload_.vision_camera_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_vision_camera_action(::hedgehog::protocol::proto::VisionCameraAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vision_camera_action();
    _impl_.payload_.vision_camera_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
}
inline ::hedgehog::protocol::proto::VisionCameraAction* HedgehogMessage::_internal_mutable_vision_camera_action() {
  if (payload_case() != kVisionCameraAction) {
    clear_payload();
    set_has_vision_camera_action();
    _impl_.payload_.vision_camera_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionCameraAction>(GetArena());
  }
  return _impl_.payload_.vision_camera_action_;
}
inline ::hedgehog::protocol::proto::VisionCameraAction* HedgehogMessage::mutable_vision_camera_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VisionCameraAction* _msg = _internal_mutable_vision_camera_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
  return _msg;
}

// .hedgehog.protocol.proto.VisionChannelMessage vision_channel_message = 30;
inline bool HedgehogMessage::has_vision_channel_message() const {
  return payload_case() == kVisionChannelMessage;
}
inline bool HedgehogMessage::_internal_has_vision_channel_message() const {
  return payload_case() == kVisionChannelMessage;
}
inline void HedgehogMessage::set_has_vision_channel_message() {
  _impl_._oneof_case_[0] = kVisionChannelMessage;
}
inline ::hedgehog::protocol::proto::VisionChannelMessage* HedgehogMessage::release_vision_channel_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
  if (payload_case() == kVisionChannelMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_channel_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vision_channel_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VisionChannelMessage& HedgehogMessage::_internal_vision_channel_message() const {
  return payload_case() == kVisionChannelMessage ? *_impl_.payload_.vision_channel_message_ : reinterpret_cast<::hedgehog::protocol::proto::VisionChannelMessage&>(::hedgehog::protocol::proto::_VisionChannelMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::VisionChannelMessage& HedgehogMessage::vision_channel_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
  return _internal_vision_channel_message();
}
inline ::hedgehog::protocol::proto::VisionChannelMessage* HedgehogMessage::unsafe_arena_release_vision_channel_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
  if (payload_case() == kVisionChannelMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_channel_message_;
    _impl_.payload_.vision_channel_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_vision_channel_message(::hedgehog::protocol::proto::VisionChannelMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vision_channel_message();
    _impl_.payload_.vision_channel_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
}
inline ::hedgehog::protocol::proto::VisionChannelMessage* HedgehogMessage::_internal_mutable_vision_channel_message() {
  if (payload_case() != kVisionChannelMessage) {
    clear_payload();
    set_has_vision_channel_message();
    _impl_.payload_.vision_channel_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionChannelMessage>(GetArena());
  }
  return _impl_.payload_.vision_channel_message_;
}
inline ::hedgehog::protocol::proto::VisionChannelMessage* HedgehogMessage::mutable_vision_channel_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VisionChannelMessage* _msg = _internal_mutable_vision_channel_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
  return _msg;
}

// .hedgehog.protocol.proto.VisionCaptureFrameAction vision_capture_frame_action = 10;
inline bool HedgehogMessage::has_vision_capture_frame_action() const {
  return payload_case() == kVisionCaptureFrameAction;
}
inline bool HedgehogMessage::_internal_has_vision_capture_frame_action() const {
  return payload_case() == kVisionCaptureFrameAction;
}
inline void HedgehogMessage::set_has_vision_capture_frame_action() {
  _impl_._oneof_case_[0] = kVisionCaptureFrameAction;
}
inline ::hedgehog::protocol::proto::VisionCaptureFrameAction* HedgehogMessage::release_vision_capture_frame_action() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
  if (payload_case() == kVisionCaptureFrameAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_capture_frame_action_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vision_capture_frame_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VisionCaptureFrameAction& HedgehogMessage::_internal_vision_capture_frame_action() const {
  return payload_case() == kVisionCaptureFrameAction ? *_impl_.payload_.vision_capture_frame_action_ : reinterpret_cast<::hedgehog::protocol::proto::VisionCaptureFrameAction&>(::hedgehog::protocol::proto::_VisionCaptureFrameAction_default_instance_);
}
inline const ::hedgehog::protocol::proto::VisionCaptureFrameAction& HedgehogMessage::vision_capture_frame_action() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
  return _internal_vision_capture_frame_action();
}
inline ::hedgehog::protocol::proto::VisionCaptureFrameAction* HedgehogMessage::unsafe_arena_release_vision_capture_frame_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
  if (payload_case() == kVisionCaptureFrameAction) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_capture_frame_action_;
    _impl_.payload_.vision_capture_frame_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_vision_capture_frame_action(::hedgehog::protocol::proto::VisionCaptureFrameAction* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vision_capture_frame_action();
    _impl_.payload_.vision_capture_frame_action_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
}
inline ::hedgehog::protocol::proto::VisionCaptureFrameAction* HedgehogMessage::_internal_mutable_vision_capture_frame_action() {
  if (payload_case() != kVisionCaptureFrameAction) {
    clear_payload();
    set_has_vision_capture_frame_action();
    _impl_.payload_.vision_capture_frame_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionCaptureFrameAction>(GetArena());
  }
  return _impl_.payload_.vision_capture_frame_action_;
}
inline ::hedgehog::protocol::proto::VisionCaptureFrameAction* HedgehogMessage::mutable_vision_capture_frame_action() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VisionCaptureFrameAction* _msg = _internal_mutable_vision_capture_frame_action();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
  return _msg;
}

// .hedgehog.protocol.proto.VisionFrameMessage vision_frame_message = 31;
inline bool HedgehogMessage::has_vision_frame_message() const {
  return payload_case() == kVisionFrameMessage;
}
inline bool HedgehogMessage::_internal_has_vision_frame_message() const {
  return payload_case() == kVisionFrameMessage;
}
inline void HedgehogMessage::set_has_vision_frame_message() {
  _impl_._oneof_case_[0] = kVisionFrameMessage;
}
inline ::hedgehog::protocol::proto::VisionFrameMessage* HedgehogMessage::release_vision_frame_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
  if (payload_case() == kVisionFrameMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_frame_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vision_frame_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VisionFrameMessage& HedgehogMessage::_internal_vision_frame_message() const {
  return payload_case() == kVisionFrameMessage ? *_impl_.payload_.vision_frame_message_ : reinterpret_cast<::hedgehog::protocol::proto::VisionFrameMessage&>(::hedgehog::protocol::proto::_VisionFrameMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::VisionFrameMessage& HedgehogMessage::vision_frame_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
  return _internal_vision_frame_message();
}
inline ::hedgehog::protocol::proto::VisionFrameMessage* HedgehogMessage::unsafe_arena_release_vision_frame_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
  if (payload_case() == kVisionFrameMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_frame_message_;
    _impl_.payload_.vision_frame_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_vision_frame_message(::hedgehog::protocol::proto::VisionFrameMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vision_frame_message();
    _impl_.payload_.vision_frame_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
}
inline ::hedgehog::protocol::proto::VisionFrameMessage* HedgehogMessage::_internal_mutable_vision_frame_message() {
  if (payload_case() != kVisionFrameMessage) {
    clear_payload();
    set_has_vision_frame_message();
    _impl_.payload_.vision_frame_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionFrameMessage>(GetArena());
  }
  return _impl_.payload_.vision_frame_message_;
}
inline ::hedgehog::protocol::proto::VisionFrameMessage* HedgehogMessage::mutable_vision_frame_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VisionFrameMessage* _msg = _internal_mutable_vision_frame_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
  return _msg;
}

// .hedgehog.protocol.proto.VisionFeatureMessage vision_feature_message = 11;
inline bool HedgehogMessage::has_vision_feature_message() const {
  return payload_case() == kVisionFeatureMessage;
}
inline bool HedgehogMessage::_internal_has_vision_feature_message() const {
  return payload_case() == kVisionFeatureMessage;
}
inline void HedgehogMessage::set_has_vision_feature_message() {
  _impl_._oneof_case_[0] = kVisionFeatureMessage;
}
inline ::hedgehog::protocol::proto::VisionFeatureMessage* HedgehogMessage::release_vision_feature_message() {
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
  if (payload_case() == kVisionFeatureMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_feature_message_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.vision_feature_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::hedgehog::protocol::proto::VisionFeatureMessage& HedgehogMessage::_internal_vision_feature_message() const {
  return payload_case() == kVisionFeatureMessage ? *_impl_.payload_.vision_feature_message_ : reinterpret_cast<::hedgehog::protocol::proto::VisionFeatureMessage&>(::hedgehog::protocol::proto::_VisionFeatureMessage_default_instance_);
}
inline const ::hedgehog::protocol::proto::VisionFeatureMessage& HedgehogMessage::vision_feature_message() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
  return _internal_vision_feature_message();
}
inline ::hedgehog::protocol::proto::VisionFeatureMessage* HedgehogMessage::unsafe_arena_release_vision_feature_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
  if (payload_case() == kVisionFeatureMessage) {
    clear_has_payload();
    auto* temp = _impl_.payload_.vision_feature_message_;
    _impl_.payload_.vision_feature_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void HedgehogMessage::unsafe_arena_set_allocated_vision_feature_message(::hedgehog::protocol::proto::VisionFeatureMessage* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_vision_feature_message();
    _impl_.payload_.vision_feature_message_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
}
inline ::hedgehog::protocol::proto::VisionFeatureMessage* HedgehogMessage::_internal_mutable_vision_feature_message() {
  if (payload_case() != kVisionFeatureMessage) {
    clear_payload();
    set_has_vision_feature_message();
    _impl_.payload_.vision_feature_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionFeatureMessage>(GetArena());
  }
  return _impl_.payload_.vision_feature_message_;
}
inline ::hedgehog::protocol::proto::VisionFeatureMessage* HedgehogMessage::mutable_vision_feature_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::hedgehog::protocol::proto::VisionFeatureMessage* _msg = _internal_mutable_vision_feature_message();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
  return _msg;
}

inline bool HedgehogMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void HedgehogMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline HedgehogMessage::PayloadCase HedgehogMessage::payload_case() const {
  return HedgehogMessage::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_2epb_2eh
