// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/hedgehog.proto

#include "hedgehog/protocol/proto/hedgehog.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hedgehog {
namespace protocol {
namespace proto {

inline constexpr HedgehogMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR HedgehogMessage::HedgehogMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct HedgehogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HedgehogMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HedgehogMessageDefaultTypeInternal() {}
  union {
    HedgehogMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HedgehogMessageDefaultTypeInternal _HedgehogMessage_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
static ::_pb::Metadata file_level_metadata_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto[1];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto = nullptr;
const ::uint32_t TableStruct_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::HedgehogMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::HedgehogMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::HedgehogMessage, _impl_.payload_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::hedgehog::protocol::proto::HedgehogMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hedgehog::protocol::proto::_HedgehogMessage_default_instance_._instance,
};
const char descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n&hedgehog/protocol/proto/hedgehog.proto"
    "\022\027hedgehog.protocol.proto\032!hedgehog/prot"
    "ocol/proto/ack.proto\032%hedgehog/protocol/"
    "proto/version.proto\032\'hedgehog/protocol/p"
    "roto/emergency.proto\032 hedgehog/protocol/"
    "proto/io.proto\032!hedgehog/protocol/proto/"
    "imu.proto\032#hedgehog/protocol/proto/motor"
    ".proto\032#hedgehog/protocol/proto/servo.pr"
    "oto\032%hedgehog/protocol/proto/process.pro"
    "to\032%hedgehog/protocol/proto/speaker.prot"
    "o\032$hedgehog/protocol/proto/vision.proto\""
    "\337\017\n\017HedgehogMessage\022C\n\017acknowledgement\030\001"
    " \001(\0132(.hedgehog.protocol.proto.Acknowled"
    "gementH\000\022B\n\017version_message\030\032 \001(\0132\'.hedg"
    "ehog.protocol.proto.VersionMessageH\000\022D\n\020"
    "emergency_action\030\033 \001(\0132(.hedgehog.protoc"
    "ol.proto.EmergencyActionH\000\022F\n\021emergency_"
    "message\030\034 \001(\0132).hedgehog.protocol.proto."
    "EmergencyMessageH\000\0226\n\tio_action\030\002 \001(\0132!."
    "hedgehog.protocol.proto.IOActionH\000\022G\n\022io"
    "_command_message\030\020 \001(\0132).hedgehog.protoc"
    "ol.proto.IOCommandMessageH\000\022@\n\016analog_me"
    "ssage\030\003 \001(\0132&.hedgehog.protocol.proto.An"
    "alogMessageH\000\022B\n\017digital_message\030\004 \001(\0132\'"
    ".hedgehog.protocol.proto.DigitalMessageH"
    "\000\022:\n\013imu_message\030\t \001(\0132#.hedgehog.protoc"
    "ol.proto.ImuMessageH\000\022<\n\014motor_action\030\005 "
    "\001(\0132$.hedgehog.protocol.proto.MotorActio"
    "nH\000\022I\n\023motor_config_action\030\030 \001(\0132*.hedge"
    "hog.protocol.proto.MotorConfigActionH\000\022M"
    "\n\025motor_command_message\030\021 \001(\0132,.hedgehog"
    ".protocol.proto.MotorCommandMessageH\000\022I\n"
    "\023motor_state_message\030\006 \001(\0132*.hedgehog.pr"
    "otocol.proto.MotorStateMessageH\000\022T\n\031moto"
    "r_set_position_action\030\022 \001(\0132/.hedgehog.p"
    "rotocol.proto.MotorSetPositionActionH\000\022<"
    "\n\014servo_action\030\007 \001(\0132$.hedgehog.protocol"
    ".proto.ServoActionH\000\022M\n\025servo_command_me"
    "ssage\030\023 \001(\0132,.hedgehog.protocol.proto.Se"
    "rvoCommandMessageH\000\022O\n\026process_execute_a"
    "ction\030\024 \001(\0132-.hedgehog.protocol.proto.Pr"
    "ocessExecuteActionH\000\022M\n\025process_execute_"
    "reply\030\025 \001(\0132,.hedgehog.protocol.proto.Pr"
    "ocessExecuteReplyH\000\022O\n\026process_stream_me"
    "ssage\030\010 \001(\0132-.hedgehog.protocol.proto.Pr"
    "ocessStreamMessageH\000\022M\n\025process_signal_a"
    "ction\030\026 \001(\0132,.hedgehog.protocol.proto.Pr"
    "ocessSignalActionH\000\022I\n\023process_exit_upda"
    "te\030\027 \001(\0132*.hedgehog.protocol.proto.Proce"
    "ssExitUpdateH\000\022@\n\016speaker_action\030\031 \001(\0132&"
    ".hedgehog.protocol.proto.SpeakerActionH\000"
    "\022K\n\024vision_camera_action\030\035 \001(\0132+.hedgeho"
    "g.protocol.proto.VisionCameraActionH\000\022O\n"
    "\026vision_channel_message\030\036 \001(\0132-.hedgehog"
    ".protocol.proto.VisionChannelMessageH\000\022X"
    "\n\033vision_capture_frame_action\030\n \001(\01321.he"
    "dgehog.protocol.proto.VisionCaptureFrame"
    "ActionH\000\022K\n\024vision_frame_message\030\037 \001(\0132+"
    ".hedgehog.protocol.proto.VisionFrameMess"
    "ageH\000\022O\n\026vision_feature_message\030\013 \001(\0132-."
    "hedgehog.protocol.proto.VisionFeatureMes"
    "sageH\000B\t\n\007payloadB,\n\037at.pria.hedgehog.pr"
    "otocol.protoB\tHedgehogPb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_deps[10] =
    {
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fack_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2femergency_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fimu_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fmotor_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fprocess_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fservo_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fspeaker_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fversion_2eproto,
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fvision_2eproto,
};
static ::absl::once_flag descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto = {
    false,
    false,
    2511,
    descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto,
    "hedgehog/protocol/proto/hedgehog.proto",
    &descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_once,
    descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_deps,
    10,
    1,
    schemas,
    file_default_instances,
    TableStruct_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto::offsets,
    file_level_metadata_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto,
    file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto,
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_getter() {
  return &descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto(&descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto);
namespace hedgehog {
namespace protocol {
namespace proto {
// ===================================================================

class HedgehogMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::HedgehogMessage, _impl_._oneof_case_);
  static const ::hedgehog::protocol::proto::Acknowledgement& acknowledgement(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VersionMessage& version_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::EmergencyAction& emergency_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::EmergencyMessage& emergency_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::IOAction& io_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::IOCommandMessage& io_command_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::AnalogMessage& analog_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::DigitalMessage& digital_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ImuMessage& imu_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::MotorAction& motor_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::MotorConfigAction& motor_config_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::MotorCommandMessage& motor_command_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::MotorStateMessage& motor_state_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::MotorSetPositionAction& motor_set_position_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ServoAction& servo_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ServoCommandMessage& servo_command_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ProcessExecuteAction& process_execute_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ProcessExecuteReply& process_execute_reply(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ProcessStreamMessage& process_stream_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ProcessSignalAction& process_signal_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::ProcessExitUpdate& process_exit_update(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::SpeakerAction& speaker_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VisionCameraAction& vision_camera_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VisionChannelMessage& vision_channel_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VisionCaptureFrameAction& vision_capture_frame_action(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VisionFrameMessage& vision_frame_message(const HedgehogMessage* msg);
  static const ::hedgehog::protocol::proto::VisionFeatureMessage& vision_feature_message(const HedgehogMessage* msg);
};

const ::hedgehog::protocol::proto::Acknowledgement& HedgehogMessage::_Internal::acknowledgement(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.acknowledgement_;
}
const ::hedgehog::protocol::proto::VersionMessage& HedgehogMessage::_Internal::version_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.version_message_;
}
const ::hedgehog::protocol::proto::EmergencyAction& HedgehogMessage::_Internal::emergency_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.emergency_action_;
}
const ::hedgehog::protocol::proto::EmergencyMessage& HedgehogMessage::_Internal::emergency_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.emergency_message_;
}
const ::hedgehog::protocol::proto::IOAction& HedgehogMessage::_Internal::io_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.io_action_;
}
const ::hedgehog::protocol::proto::IOCommandMessage& HedgehogMessage::_Internal::io_command_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.io_command_message_;
}
const ::hedgehog::protocol::proto::AnalogMessage& HedgehogMessage::_Internal::analog_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.analog_message_;
}
const ::hedgehog::protocol::proto::DigitalMessage& HedgehogMessage::_Internal::digital_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.digital_message_;
}
const ::hedgehog::protocol::proto::ImuMessage& HedgehogMessage::_Internal::imu_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.imu_message_;
}
const ::hedgehog::protocol::proto::MotorAction& HedgehogMessage::_Internal::motor_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.motor_action_;
}
const ::hedgehog::protocol::proto::MotorConfigAction& HedgehogMessage::_Internal::motor_config_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.motor_config_action_;
}
const ::hedgehog::protocol::proto::MotorCommandMessage& HedgehogMessage::_Internal::motor_command_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.motor_command_message_;
}
const ::hedgehog::protocol::proto::MotorStateMessage& HedgehogMessage::_Internal::motor_state_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.motor_state_message_;
}
const ::hedgehog::protocol::proto::MotorSetPositionAction& HedgehogMessage::_Internal::motor_set_position_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.motor_set_position_action_;
}
const ::hedgehog::protocol::proto::ServoAction& HedgehogMessage::_Internal::servo_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.servo_action_;
}
const ::hedgehog::protocol::proto::ServoCommandMessage& HedgehogMessage::_Internal::servo_command_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.servo_command_message_;
}
const ::hedgehog::protocol::proto::ProcessExecuteAction& HedgehogMessage::_Internal::process_execute_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.process_execute_action_;
}
const ::hedgehog::protocol::proto::ProcessExecuteReply& HedgehogMessage::_Internal::process_execute_reply(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.process_execute_reply_;
}
const ::hedgehog::protocol::proto::ProcessStreamMessage& HedgehogMessage::_Internal::process_stream_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.process_stream_message_;
}
const ::hedgehog::protocol::proto::ProcessSignalAction& HedgehogMessage::_Internal::process_signal_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.process_signal_action_;
}
const ::hedgehog::protocol::proto::ProcessExitUpdate& HedgehogMessage::_Internal::process_exit_update(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.process_exit_update_;
}
const ::hedgehog::protocol::proto::SpeakerAction& HedgehogMessage::_Internal::speaker_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.speaker_action_;
}
const ::hedgehog::protocol::proto::VisionCameraAction& HedgehogMessage::_Internal::vision_camera_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.vision_camera_action_;
}
const ::hedgehog::protocol::proto::VisionChannelMessage& HedgehogMessage::_Internal::vision_channel_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.vision_channel_message_;
}
const ::hedgehog::protocol::proto::VisionCaptureFrameAction& HedgehogMessage::_Internal::vision_capture_frame_action(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.vision_capture_frame_action_;
}
const ::hedgehog::protocol::proto::VisionFrameMessage& HedgehogMessage::_Internal::vision_frame_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.vision_frame_message_;
}
const ::hedgehog::protocol::proto::VisionFeatureMessage& HedgehogMessage::_Internal::vision_feature_message(const HedgehogMessage* msg) {
  return *msg->_impl_.payload_.vision_feature_message_;
}
void HedgehogMessage::set_allocated_acknowledgement(::hedgehog::protocol::proto::Acknowledgement* acknowledgement) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (acknowledgement) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(acknowledgement)->GetArena();
    if (message_arena != submessage_arena) {
      acknowledgement = ::google::protobuf::internal::GetOwnedMessage(message_arena, acknowledgement, submessage_arena);
    }
    set_has_acknowledgement();
    _impl_.payload_.acknowledgement_ = acknowledgement;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.acknowledgement)
}
void HedgehogMessage::clear_acknowledgement() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kAcknowledgement) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.acknowledgement_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_version_message(::hedgehog::protocol::proto::VersionMessage* version_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (version_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(version_message)->GetArena();
    if (message_arena != submessage_arena) {
      version_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, version_message, submessage_arena);
    }
    set_has_version_message();
    _impl_.payload_.version_message_ = version_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.version_message)
}
void HedgehogMessage::clear_version_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVersionMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.version_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_emergency_action(::hedgehog::protocol::proto::EmergencyAction* emergency_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (emergency_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(emergency_action)->GetArena();
    if (message_arena != submessage_arena) {
      emergency_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, emergency_action, submessage_arena);
    }
    set_has_emergency_action();
    _impl_.payload_.emergency_action_ = emergency_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.emergency_action)
}
void HedgehogMessage::clear_emergency_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kEmergencyAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.emergency_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_emergency_message(::hedgehog::protocol::proto::EmergencyMessage* emergency_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (emergency_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(emergency_message)->GetArena();
    if (message_arena != submessage_arena) {
      emergency_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, emergency_message, submessage_arena);
    }
    set_has_emergency_message();
    _impl_.payload_.emergency_message_ = emergency_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.emergency_message)
}
void HedgehogMessage::clear_emergency_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kEmergencyMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.emergency_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_io_action(::hedgehog::protocol::proto::IOAction* io_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (io_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(io_action)->GetArena();
    if (message_arena != submessage_arena) {
      io_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, io_action, submessage_arena);
    }
    set_has_io_action();
    _impl_.payload_.io_action_ = io_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.io_action)
}
void HedgehogMessage::clear_io_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kIoAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.io_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_io_command_message(::hedgehog::protocol::proto::IOCommandMessage* io_command_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (io_command_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(io_command_message)->GetArena();
    if (message_arena != submessage_arena) {
      io_command_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, io_command_message, submessage_arena);
    }
    set_has_io_command_message();
    _impl_.payload_.io_command_message_ = io_command_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.io_command_message)
}
void HedgehogMessage::clear_io_command_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kIoCommandMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.io_command_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_analog_message(::hedgehog::protocol::proto::AnalogMessage* analog_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (analog_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(analog_message)->GetArena();
    if (message_arena != submessage_arena) {
      analog_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, analog_message, submessage_arena);
    }
    set_has_analog_message();
    _impl_.payload_.analog_message_ = analog_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.analog_message)
}
void HedgehogMessage::clear_analog_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kAnalogMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.analog_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_digital_message(::hedgehog::protocol::proto::DigitalMessage* digital_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (digital_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(digital_message)->GetArena();
    if (message_arena != submessage_arena) {
      digital_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, digital_message, submessage_arena);
    }
    set_has_digital_message();
    _impl_.payload_.digital_message_ = digital_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.digital_message)
}
void HedgehogMessage::clear_digital_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kDigitalMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.digital_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_imu_message(::hedgehog::protocol::proto::ImuMessage* imu_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (imu_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(imu_message)->GetArena();
    if (message_arena != submessage_arena) {
      imu_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, imu_message, submessage_arena);
    }
    set_has_imu_message();
    _impl_.payload_.imu_message_ = imu_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.imu_message)
}
void HedgehogMessage::clear_imu_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kImuMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.imu_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_motor_action(::hedgehog::protocol::proto::MotorAction* motor_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (motor_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(motor_action)->GetArena();
    if (message_arena != submessage_arena) {
      motor_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, motor_action, submessage_arena);
    }
    set_has_motor_action();
    _impl_.payload_.motor_action_ = motor_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_action)
}
void HedgehogMessage::clear_motor_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMotorAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.motor_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_motor_config_action(::hedgehog::protocol::proto::MotorConfigAction* motor_config_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (motor_config_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(motor_config_action)->GetArena();
    if (message_arena != submessage_arena) {
      motor_config_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, motor_config_action, submessage_arena);
    }
    set_has_motor_config_action();
    _impl_.payload_.motor_config_action_ = motor_config_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_config_action)
}
void HedgehogMessage::clear_motor_config_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMotorConfigAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.motor_config_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_motor_command_message(::hedgehog::protocol::proto::MotorCommandMessage* motor_command_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (motor_command_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(motor_command_message)->GetArena();
    if (message_arena != submessage_arena) {
      motor_command_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, motor_command_message, submessage_arena);
    }
    set_has_motor_command_message();
    _impl_.payload_.motor_command_message_ = motor_command_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_command_message)
}
void HedgehogMessage::clear_motor_command_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMotorCommandMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.motor_command_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_motor_state_message(::hedgehog::protocol::proto::MotorStateMessage* motor_state_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (motor_state_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(motor_state_message)->GetArena();
    if (message_arena != submessage_arena) {
      motor_state_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, motor_state_message, submessage_arena);
    }
    set_has_motor_state_message();
    _impl_.payload_.motor_state_message_ = motor_state_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_state_message)
}
void HedgehogMessage::clear_motor_state_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMotorStateMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.motor_state_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_motor_set_position_action(::hedgehog::protocol::proto::MotorSetPositionAction* motor_set_position_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (motor_set_position_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(motor_set_position_action)->GetArena();
    if (message_arena != submessage_arena) {
      motor_set_position_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, motor_set_position_action, submessage_arena);
    }
    set_has_motor_set_position_action();
    _impl_.payload_.motor_set_position_action_ = motor_set_position_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.motor_set_position_action)
}
void HedgehogMessage::clear_motor_set_position_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kMotorSetPositionAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.motor_set_position_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_servo_action(::hedgehog::protocol::proto::ServoAction* servo_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (servo_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(servo_action)->GetArena();
    if (message_arena != submessage_arena) {
      servo_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, servo_action, submessage_arena);
    }
    set_has_servo_action();
    _impl_.payload_.servo_action_ = servo_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.servo_action)
}
void HedgehogMessage::clear_servo_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kServoAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.servo_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_servo_command_message(::hedgehog::protocol::proto::ServoCommandMessage* servo_command_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (servo_command_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(servo_command_message)->GetArena();
    if (message_arena != submessage_arena) {
      servo_command_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, servo_command_message, submessage_arena);
    }
    set_has_servo_command_message();
    _impl_.payload_.servo_command_message_ = servo_command_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.servo_command_message)
}
void HedgehogMessage::clear_servo_command_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kServoCommandMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.servo_command_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_process_execute_action(::hedgehog::protocol::proto::ProcessExecuteAction* process_execute_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (process_execute_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(process_execute_action)->GetArena();
    if (message_arena != submessage_arena) {
      process_execute_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, process_execute_action, submessage_arena);
    }
    set_has_process_execute_action();
    _impl_.payload_.process_execute_action_ = process_execute_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_execute_action)
}
void HedgehogMessage::clear_process_execute_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kProcessExecuteAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.process_execute_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_process_execute_reply(::hedgehog::protocol::proto::ProcessExecuteReply* process_execute_reply) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (process_execute_reply) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(process_execute_reply)->GetArena();
    if (message_arena != submessage_arena) {
      process_execute_reply = ::google::protobuf::internal::GetOwnedMessage(message_arena, process_execute_reply, submessage_arena);
    }
    set_has_process_execute_reply();
    _impl_.payload_.process_execute_reply_ = process_execute_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_execute_reply)
}
void HedgehogMessage::clear_process_execute_reply() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kProcessExecuteReply) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.process_execute_reply_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_process_stream_message(::hedgehog::protocol::proto::ProcessStreamMessage* process_stream_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (process_stream_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(process_stream_message)->GetArena();
    if (message_arena != submessage_arena) {
      process_stream_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, process_stream_message, submessage_arena);
    }
    set_has_process_stream_message();
    _impl_.payload_.process_stream_message_ = process_stream_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_stream_message)
}
void HedgehogMessage::clear_process_stream_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kProcessStreamMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.process_stream_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_process_signal_action(::hedgehog::protocol::proto::ProcessSignalAction* process_signal_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (process_signal_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(process_signal_action)->GetArena();
    if (message_arena != submessage_arena) {
      process_signal_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, process_signal_action, submessage_arena);
    }
    set_has_process_signal_action();
    _impl_.payload_.process_signal_action_ = process_signal_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_signal_action)
}
void HedgehogMessage::clear_process_signal_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kProcessSignalAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.process_signal_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_process_exit_update(::hedgehog::protocol::proto::ProcessExitUpdate* process_exit_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (process_exit_update) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(process_exit_update)->GetArena();
    if (message_arena != submessage_arena) {
      process_exit_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, process_exit_update, submessage_arena);
    }
    set_has_process_exit_update();
    _impl_.payload_.process_exit_update_ = process_exit_update;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.process_exit_update)
}
void HedgehogMessage::clear_process_exit_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kProcessExitUpdate) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.process_exit_update_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_speaker_action(::hedgehog::protocol::proto::SpeakerAction* speaker_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (speaker_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(speaker_action)->GetArena();
    if (message_arena != submessage_arena) {
      speaker_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, speaker_action, submessage_arena);
    }
    set_has_speaker_action();
    _impl_.payload_.speaker_action_ = speaker_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.speaker_action)
}
void HedgehogMessage::clear_speaker_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kSpeakerAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.speaker_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_vision_camera_action(::hedgehog::protocol::proto::VisionCameraAction* vision_camera_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vision_camera_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vision_camera_action)->GetArena();
    if (message_arena != submessage_arena) {
      vision_camera_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, vision_camera_action, submessage_arena);
    }
    set_has_vision_camera_action();
    _impl_.payload_.vision_camera_action_ = vision_camera_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_camera_action)
}
void HedgehogMessage::clear_vision_camera_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVisionCameraAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vision_camera_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_vision_channel_message(::hedgehog::protocol::proto::VisionChannelMessage* vision_channel_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vision_channel_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vision_channel_message)->GetArena();
    if (message_arena != submessage_arena) {
      vision_channel_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, vision_channel_message, submessage_arena);
    }
    set_has_vision_channel_message();
    _impl_.payload_.vision_channel_message_ = vision_channel_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_channel_message)
}
void HedgehogMessage::clear_vision_channel_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVisionChannelMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vision_channel_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_vision_capture_frame_action(::hedgehog::protocol::proto::VisionCaptureFrameAction* vision_capture_frame_action) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vision_capture_frame_action) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vision_capture_frame_action)->GetArena();
    if (message_arena != submessage_arena) {
      vision_capture_frame_action = ::google::protobuf::internal::GetOwnedMessage(message_arena, vision_capture_frame_action, submessage_arena);
    }
    set_has_vision_capture_frame_action();
    _impl_.payload_.vision_capture_frame_action_ = vision_capture_frame_action;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_capture_frame_action)
}
void HedgehogMessage::clear_vision_capture_frame_action() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVisionCaptureFrameAction) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vision_capture_frame_action_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_vision_frame_message(::hedgehog::protocol::proto::VisionFrameMessage* vision_frame_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vision_frame_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vision_frame_message)->GetArena();
    if (message_arena != submessage_arena) {
      vision_frame_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, vision_frame_message, submessage_arena);
    }
    set_has_vision_frame_message();
    _impl_.payload_.vision_frame_message_ = vision_frame_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_frame_message)
}
void HedgehogMessage::clear_vision_frame_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVisionFrameMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vision_frame_message_;
    }
    clear_has_payload();
  }
}
void HedgehogMessage::set_allocated_vision_feature_message(::hedgehog::protocol::proto::VisionFeatureMessage* vision_feature_message) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (vision_feature_message) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(vision_feature_message)->GetArena();
    if (message_arena != submessage_arena) {
      vision_feature_message = ::google::protobuf::internal::GetOwnedMessage(message_arena, vision_feature_message, submessage_arena);
    }
    set_has_vision_feature_message();
    _impl_.payload_.vision_feature_message_ = vision_feature_message;
  }
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.HedgehogMessage.vision_feature_message)
}
void HedgehogMessage::clear_vision_feature_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kVisionFeatureMessage) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.vision_feature_message_;
    }
    clear_has_payload();
  }
}
HedgehogMessage::HedgehogMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.HedgehogMessage)
}
inline PROTOBUF_NDEBUG_INLINE HedgehogMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

HedgehogMessage::HedgehogMessage(
    ::google::protobuf::Arena* arena,
    const HedgehogMessage& from)
    : ::google::protobuf::Message(arena) {
  HedgehogMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kAcknowledgement:
        _impl_.payload_.acknowledgement_ = CreateMaybeMessage<::hedgehog::protocol::proto::Acknowledgement>(arena, *from._impl_.payload_.acknowledgement_);
        break;
      case kVersionMessage:
        _impl_.payload_.version_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VersionMessage>(arena, *from._impl_.payload_.version_message_);
        break;
      case kEmergencyAction:
        _impl_.payload_.emergency_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::EmergencyAction>(arena, *from._impl_.payload_.emergency_action_);
        break;
      case kEmergencyMessage:
        _impl_.payload_.emergency_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::EmergencyMessage>(arena, *from._impl_.payload_.emergency_message_);
        break;
      case kIoAction:
        _impl_.payload_.io_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::IOAction>(arena, *from._impl_.payload_.io_action_);
        break;
      case kIoCommandMessage:
        _impl_.payload_.io_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::IOCommandMessage>(arena, *from._impl_.payload_.io_command_message_);
        break;
      case kAnalogMessage:
        _impl_.payload_.analog_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::AnalogMessage>(arena, *from._impl_.payload_.analog_message_);
        break;
      case kDigitalMessage:
        _impl_.payload_.digital_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::DigitalMessage>(arena, *from._impl_.payload_.digital_message_);
        break;
      case kImuMessage:
        _impl_.payload_.imu_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ImuMessage>(arena, *from._impl_.payload_.imu_message_);
        break;
      case kMotorAction:
        _impl_.payload_.motor_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorAction>(arena, *from._impl_.payload_.motor_action_);
        break;
      case kMotorConfigAction:
        _impl_.payload_.motor_config_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorConfigAction>(arena, *from._impl_.payload_.motor_config_action_);
        break;
      case kMotorCommandMessage:
        _impl_.payload_.motor_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorCommandMessage>(arena, *from._impl_.payload_.motor_command_message_);
        break;
      case kMotorStateMessage:
        _impl_.payload_.motor_state_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorStateMessage>(arena, *from._impl_.payload_.motor_state_message_);
        break;
      case kMotorSetPositionAction:
        _impl_.payload_.motor_set_position_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::MotorSetPositionAction>(arena, *from._impl_.payload_.motor_set_position_action_);
        break;
      case kServoAction:
        _impl_.payload_.servo_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ServoAction>(arena, *from._impl_.payload_.servo_action_);
        break;
      case kServoCommandMessage:
        _impl_.payload_.servo_command_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ServoCommandMessage>(arena, *from._impl_.payload_.servo_command_message_);
        break;
      case kProcessExecuteAction:
        _impl_.payload_.process_execute_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExecuteAction>(arena, *from._impl_.payload_.process_execute_action_);
        break;
      case kProcessExecuteReply:
        _impl_.payload_.process_execute_reply_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExecuteReply>(arena, *from._impl_.payload_.process_execute_reply_);
        break;
      case kProcessStreamMessage:
        _impl_.payload_.process_stream_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessStreamMessage>(arena, *from._impl_.payload_.process_stream_message_);
        break;
      case kProcessSignalAction:
        _impl_.payload_.process_signal_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessSignalAction>(arena, *from._impl_.payload_.process_signal_action_);
        break;
      case kProcessExitUpdate:
        _impl_.payload_.process_exit_update_ = CreateMaybeMessage<::hedgehog::protocol::proto::ProcessExitUpdate>(arena, *from._impl_.payload_.process_exit_update_);
        break;
      case kSpeakerAction:
        _impl_.payload_.speaker_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::SpeakerAction>(arena, *from._impl_.payload_.speaker_action_);
        break;
      case kVisionCameraAction:
        _impl_.payload_.vision_camera_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionCameraAction>(arena, *from._impl_.payload_.vision_camera_action_);
        break;
      case kVisionChannelMessage:
        _impl_.payload_.vision_channel_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionChannelMessage>(arena, *from._impl_.payload_.vision_channel_message_);
        break;
      case kVisionCaptureFrameAction:
        _impl_.payload_.vision_capture_frame_action_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionCaptureFrameAction>(arena, *from._impl_.payload_.vision_capture_frame_action_);
        break;
      case kVisionFrameMessage:
        _impl_.payload_.vision_frame_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionFrameMessage>(arena, *from._impl_.payload_.vision_frame_message_);
        break;
      case kVisionFeatureMessage:
        _impl_.payload_.vision_feature_message_ = CreateMaybeMessage<::hedgehog::protocol::proto::VisionFeatureMessage>(arena, *from._impl_.payload_.vision_feature_message_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:hedgehog.protocol.proto.HedgehogMessage)
}
inline PROTOBUF_NDEBUG_INLINE HedgehogMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void HedgehogMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HedgehogMessage::~HedgehogMessage() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.HedgehogMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void HedgehogMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
  _impl_.~Impl_();
}

void HedgehogMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:hedgehog.protocol.proto.HedgehogMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (payload_case()) {
    case kAcknowledgement: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.acknowledgement_;
      }
      break;
    }
    case kVersionMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.version_message_;
      }
      break;
    }
    case kEmergencyAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.emergency_action_;
      }
      break;
    }
    case kEmergencyMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.emergency_message_;
      }
      break;
    }
    case kIoAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.io_action_;
      }
      break;
    }
    case kIoCommandMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.io_command_message_;
      }
      break;
    }
    case kAnalogMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.analog_message_;
      }
      break;
    }
    case kDigitalMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.digital_message_;
      }
      break;
    }
    case kImuMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.imu_message_;
      }
      break;
    }
    case kMotorAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.motor_action_;
      }
      break;
    }
    case kMotorConfigAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.motor_config_action_;
      }
      break;
    }
    case kMotorCommandMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.motor_command_message_;
      }
      break;
    }
    case kMotorStateMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.motor_state_message_;
      }
      break;
    }
    case kMotorSetPositionAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.motor_set_position_action_;
      }
      break;
    }
    case kServoAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.servo_action_;
      }
      break;
    }
    case kServoCommandMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.servo_command_message_;
      }
      break;
    }
    case kProcessExecuteAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.process_execute_action_;
      }
      break;
    }
    case kProcessExecuteReply: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.process_execute_reply_;
      }
      break;
    }
    case kProcessStreamMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.process_stream_message_;
      }
      break;
    }
    case kProcessSignalAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.process_signal_action_;
      }
      break;
    }
    case kProcessExitUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.process_exit_update_;
      }
      break;
    }
    case kSpeakerAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.speaker_action_;
      }
      break;
    }
    case kVisionCameraAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vision_camera_action_;
      }
      break;
    }
    case kVisionChannelMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vision_channel_message_;
      }
      break;
    }
    case kVisionCaptureFrameAction: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vision_capture_frame_action_;
      }
      break;
    }
    case kVisionFrameMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vision_frame_message_;
      }
      break;
    }
    case kVisionFeatureMessage: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.vision_feature_message_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


PROTOBUF_NOINLINE void HedgehogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.HedgehogMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* HedgehogMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 27, 27, 0, 2> HedgehogMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    31, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147514368,  // skipmap
    offsetof(decltype(_table_), field_entries),
    27,  // num_field_entries
    27,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_HedgehogMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .hedgehog.protocol.proto.Acknowledgement acknowledgement = 1;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.acknowledgement_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.IOAction io_action = 2;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.io_action_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.AnalogMessage analog_message = 3;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.analog_message_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.DigitalMessage digital_message = 4;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.digital_message_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.MotorAction motor_action = 5;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.motor_action_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.MotorStateMessage motor_state_message = 6;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.motor_state_message_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ServoAction servo_action = 7;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.servo_action_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ProcessStreamMessage process_stream_message = 8;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.process_stream_message_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ImuMessage imu_message = 9;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.imu_message_), _Internal::kOneofCaseOffset + 0, 8,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.VisionCaptureFrameAction vision_capture_frame_action = 10;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.vision_capture_frame_action_), _Internal::kOneofCaseOffset + 0, 9,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvDefault)},
    // .hedgehog.protocol.proto.VisionFeatureMessage vision_feature_message = 11;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.vision_feature_message_), _Internal::kOneofCaseOffset + 0, 10,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.IOCommandMessage io_command_message = 16;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.io_command_message_), _Internal::kOneofCaseOffset + 0, 11,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.MotorCommandMessage motor_command_message = 17;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.motor_command_message_), _Internal::kOneofCaseOffset + 0, 12,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.MotorSetPositionAction motor_set_position_action = 18;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.motor_set_position_action_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ServoCommandMessage servo_command_message = 19;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.servo_command_message_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ProcessExecuteAction process_execute_action = 20;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.process_execute_action_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ProcessExecuteReply process_execute_reply = 21;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.process_execute_reply_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ProcessSignalAction process_signal_action = 22;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.process_signal_action_), _Internal::kOneofCaseOffset + 0, 17,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.ProcessExitUpdate process_exit_update = 23;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.process_exit_update_), _Internal::kOneofCaseOffset + 0, 18,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.MotorConfigAction motor_config_action = 24;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.motor_config_action_), _Internal::kOneofCaseOffset + 0, 19,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.SpeakerAction speaker_action = 25;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.speaker_action_), _Internal::kOneofCaseOffset + 0, 20,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.VersionMessage version_message = 26;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.version_message_), _Internal::kOneofCaseOffset + 0, 21,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.EmergencyAction emergency_action = 27;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.emergency_action_), _Internal::kOneofCaseOffset + 0, 22,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.EmergencyMessage emergency_message = 28;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.emergency_message_), _Internal::kOneofCaseOffset + 0, 23,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.VisionCameraAction vision_camera_action = 29;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.vision_camera_action_), _Internal::kOneofCaseOffset + 0, 24,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.VisionChannelMessage vision_channel_message = 30;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.vision_channel_message_), _Internal::kOneofCaseOffset + 0, 25,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .hedgehog.protocol.proto.VisionFrameMessage vision_frame_message = 31;
    {PROTOBUF_FIELD_OFFSET(HedgehogMessage, _impl_.payload_.vision_frame_message_), _Internal::kOneofCaseOffset + 0, 26,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::Acknowledgement>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::IOAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::AnalogMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::DigitalMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::MotorAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::MotorStateMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ServoAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ProcessStreamMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ImuMessage>()},
    {::_pbi::FieldAuxDefaultMessage{}, &::hedgehog::protocol::proto::_VisionCaptureFrameAction_default_instance_},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::VisionFeatureMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::IOCommandMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::MotorCommandMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::MotorSetPositionAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ServoCommandMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ProcessExecuteAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ProcessExecuteReply>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ProcessSignalAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::ProcessExitUpdate>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::MotorConfigAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::SpeakerAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::VersionMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::EmergencyAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::EmergencyMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::VisionCameraAction>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::VisionChannelMessage>()},
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::VisionFrameMessage>()},
  }}, {{
  }},
};

::uint8_t* HedgehogMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.HedgehogMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (payload_case()) {
    case kAcknowledgement: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::acknowledgement(this),
          _Internal::acknowledgement(this).GetCachedSize(), target, stream);
      break;
    }
    case kIoAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          2, _Internal::io_action(this),
          _Internal::io_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kAnalogMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, _Internal::analog_message(this),
          _Internal::analog_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kDigitalMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::digital_message(this),
          _Internal::digital_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotorAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::motor_action(this),
          _Internal::motor_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotorStateMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, _Internal::motor_state_message(this),
          _Internal::motor_state_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kServoAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, _Internal::servo_action(this),
          _Internal::servo_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessStreamMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::process_stream_message(this),
          _Internal::process_stream_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kImuMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::imu_message(this),
          _Internal::imu_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisionCaptureFrameAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          10, _Internal::vision_capture_frame_action(this),
          _Internal::vision_capture_frame_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisionFeatureMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          11, _Internal::vision_feature_message(this),
          _Internal::vision_feature_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kIoCommandMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          16, _Internal::io_command_message(this),
          _Internal::io_command_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotorCommandMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          17, _Internal::motor_command_message(this),
          _Internal::motor_command_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotorSetPositionAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          18, _Internal::motor_set_position_action(this),
          _Internal::motor_set_position_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kServoCommandMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          19, _Internal::servo_command_message(this),
          _Internal::servo_command_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessExecuteAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          20, _Internal::process_execute_action(this),
          _Internal::process_execute_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessExecuteReply: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          21, _Internal::process_execute_reply(this),
          _Internal::process_execute_reply(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessSignalAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          22, _Internal::process_signal_action(this),
          _Internal::process_signal_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kProcessExitUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          23, _Internal::process_exit_update(this),
          _Internal::process_exit_update(this).GetCachedSize(), target, stream);
      break;
    }
    case kMotorConfigAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          24, _Internal::motor_config_action(this),
          _Internal::motor_config_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kSpeakerAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          25, _Internal::speaker_action(this),
          _Internal::speaker_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kVersionMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          26, _Internal::version_message(this),
          _Internal::version_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmergencyAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          27, _Internal::emergency_action(this),
          _Internal::emergency_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kEmergencyMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          28, _Internal::emergency_message(this),
          _Internal::emergency_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisionCameraAction: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          29, _Internal::vision_camera_action(this),
          _Internal::vision_camera_action(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisionChannelMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          30, _Internal::vision_channel_message(this),
          _Internal::vision_channel_message(this).GetCachedSize(), target, stream);
      break;
    }
    case kVisionFrameMessage: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          31, _Internal::vision_frame_message(this),
          _Internal::vision_frame_message(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.HedgehogMessage)
  return target;
}

::size_t HedgehogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.HedgehogMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .hedgehog.protocol.proto.Acknowledgement acknowledgement = 1;
    case kAcknowledgement: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.acknowledgement_);
      break;
    }
    // .hedgehog.protocol.proto.VersionMessage version_message = 26;
    case kVersionMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.version_message_);
      break;
    }
    // .hedgehog.protocol.proto.EmergencyAction emergency_action = 27;
    case kEmergencyAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.emergency_action_);
      break;
    }
    // .hedgehog.protocol.proto.EmergencyMessage emergency_message = 28;
    case kEmergencyMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.emergency_message_);
      break;
    }
    // .hedgehog.protocol.proto.IOAction io_action = 2;
    case kIoAction: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.io_action_);
      break;
    }
    // .hedgehog.protocol.proto.IOCommandMessage io_command_message = 16;
    case kIoCommandMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.io_command_message_);
      break;
    }
    // .hedgehog.protocol.proto.AnalogMessage analog_message = 3;
    case kAnalogMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.analog_message_);
      break;
    }
    // .hedgehog.protocol.proto.DigitalMessage digital_message = 4;
    case kDigitalMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.digital_message_);
      break;
    }
    // .hedgehog.protocol.proto.ImuMessage imu_message = 9;
    case kImuMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.imu_message_);
      break;
    }
    // .hedgehog.protocol.proto.MotorAction motor_action = 5;
    case kMotorAction: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.motor_action_);
      break;
    }
    // .hedgehog.protocol.proto.MotorConfigAction motor_config_action = 24;
    case kMotorConfigAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.motor_config_action_);
      break;
    }
    // .hedgehog.protocol.proto.MotorCommandMessage motor_command_message = 17;
    case kMotorCommandMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.motor_command_message_);
      break;
    }
    // .hedgehog.protocol.proto.MotorStateMessage motor_state_message = 6;
    case kMotorStateMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.motor_state_message_);
      break;
    }
    // .hedgehog.protocol.proto.MotorSetPositionAction motor_set_position_action = 18;
    case kMotorSetPositionAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.motor_set_position_action_);
      break;
    }
    // .hedgehog.protocol.proto.ServoAction servo_action = 7;
    case kServoAction: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.servo_action_);
      break;
    }
    // .hedgehog.protocol.proto.ServoCommandMessage servo_command_message = 19;
    case kServoCommandMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.servo_command_message_);
      break;
    }
    // .hedgehog.protocol.proto.ProcessExecuteAction process_execute_action = 20;
    case kProcessExecuteAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.process_execute_action_);
      break;
    }
    // .hedgehog.protocol.proto.ProcessExecuteReply process_execute_reply = 21;
    case kProcessExecuteReply: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.process_execute_reply_);
      break;
    }
    // .hedgehog.protocol.proto.ProcessStreamMessage process_stream_message = 8;
    case kProcessStreamMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.process_stream_message_);
      break;
    }
    // .hedgehog.protocol.proto.ProcessSignalAction process_signal_action = 22;
    case kProcessSignalAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.process_signal_action_);
      break;
    }
    // .hedgehog.protocol.proto.ProcessExitUpdate process_exit_update = 23;
    case kProcessExitUpdate: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.process_exit_update_);
      break;
    }
    // .hedgehog.protocol.proto.SpeakerAction speaker_action = 25;
    case kSpeakerAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.speaker_action_);
      break;
    }
    // .hedgehog.protocol.proto.VisionCameraAction vision_camera_action = 29;
    case kVisionCameraAction: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vision_camera_action_);
      break;
    }
    // .hedgehog.protocol.proto.VisionChannelMessage vision_channel_message = 30;
    case kVisionChannelMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vision_channel_message_);
      break;
    }
    // .hedgehog.protocol.proto.VisionCaptureFrameAction vision_capture_frame_action = 10;
    case kVisionCaptureFrameAction: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vision_capture_frame_action_);
      break;
    }
    // .hedgehog.protocol.proto.VisionFrameMessage vision_frame_message = 31;
    case kVisionFrameMessage: {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vision_frame_message_);
      break;
    }
    // .hedgehog.protocol.proto.VisionFeatureMessage vision_feature_message = 11;
    case kVisionFeatureMessage: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.payload_.vision_feature_message_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData HedgehogMessage::_class_data_ = {
    HedgehogMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* HedgehogMessage::GetClassData() const {
  return &_class_data_;
}

void HedgehogMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<HedgehogMessage*>(&to_msg);
  auto& from = static_cast<const HedgehogMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.HedgehogMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kAcknowledgement: {
      _this->_internal_mutable_acknowledgement()->::hedgehog::protocol::proto::Acknowledgement::MergeFrom(
          from._internal_acknowledgement());
      break;
    }
    case kVersionMessage: {
      _this->_internal_mutable_version_message()->::hedgehog::protocol::proto::VersionMessage::MergeFrom(
          from._internal_version_message());
      break;
    }
    case kEmergencyAction: {
      _this->_internal_mutable_emergency_action()->::hedgehog::protocol::proto::EmergencyAction::MergeFrom(
          from._internal_emergency_action());
      break;
    }
    case kEmergencyMessage: {
      _this->_internal_mutable_emergency_message()->::hedgehog::protocol::proto::EmergencyMessage::MergeFrom(
          from._internal_emergency_message());
      break;
    }
    case kIoAction: {
      _this->_internal_mutable_io_action()->::hedgehog::protocol::proto::IOAction::MergeFrom(
          from._internal_io_action());
      break;
    }
    case kIoCommandMessage: {
      _this->_internal_mutable_io_command_message()->::hedgehog::protocol::proto::IOCommandMessage::MergeFrom(
          from._internal_io_command_message());
      break;
    }
    case kAnalogMessage: {
      _this->_internal_mutable_analog_message()->::hedgehog::protocol::proto::AnalogMessage::MergeFrom(
          from._internal_analog_message());
      break;
    }
    case kDigitalMessage: {
      _this->_internal_mutable_digital_message()->::hedgehog::protocol::proto::DigitalMessage::MergeFrom(
          from._internal_digital_message());
      break;
    }
    case kImuMessage: {
      _this->_internal_mutable_imu_message()->::hedgehog::protocol::proto::ImuMessage::MergeFrom(
          from._internal_imu_message());
      break;
    }
    case kMotorAction: {
      _this->_internal_mutable_motor_action()->::hedgehog::protocol::proto::MotorAction::MergeFrom(
          from._internal_motor_action());
      break;
    }
    case kMotorConfigAction: {
      _this->_internal_mutable_motor_config_action()->::hedgehog::protocol::proto::MotorConfigAction::MergeFrom(
          from._internal_motor_config_action());
      break;
    }
    case kMotorCommandMessage: {
      _this->_internal_mutable_motor_command_message()->::hedgehog::protocol::proto::MotorCommandMessage::MergeFrom(
          from._internal_motor_command_message());
      break;
    }
    case kMotorStateMessage: {
      _this->_internal_mutable_motor_state_message()->::hedgehog::protocol::proto::MotorStateMessage::MergeFrom(
          from._internal_motor_state_message());
      break;
    }
    case kMotorSetPositionAction: {
      _this->_internal_mutable_motor_set_position_action()->::hedgehog::protocol::proto::MotorSetPositionAction::MergeFrom(
          from._internal_motor_set_position_action());
      break;
    }
    case kServoAction: {
      _this->_internal_mutable_servo_action()->::hedgehog::protocol::proto::ServoAction::MergeFrom(
          from._internal_servo_action());
      break;
    }
    case kServoCommandMessage: {
      _this->_internal_mutable_servo_command_message()->::hedgehog::protocol::proto::ServoCommandMessage::MergeFrom(
          from._internal_servo_command_message());
      break;
    }
    case kProcessExecuteAction: {
      _this->_internal_mutable_process_execute_action()->::hedgehog::protocol::proto::ProcessExecuteAction::MergeFrom(
          from._internal_process_execute_action());
      break;
    }
    case kProcessExecuteReply: {
      _this->_internal_mutable_process_execute_reply()->::hedgehog::protocol::proto::ProcessExecuteReply::MergeFrom(
          from._internal_process_execute_reply());
      break;
    }
    case kProcessStreamMessage: {
      _this->_internal_mutable_process_stream_message()->::hedgehog::protocol::proto::ProcessStreamMessage::MergeFrom(
          from._internal_process_stream_message());
      break;
    }
    case kProcessSignalAction: {
      _this->_internal_mutable_process_signal_action()->::hedgehog::protocol::proto::ProcessSignalAction::MergeFrom(
          from._internal_process_signal_action());
      break;
    }
    case kProcessExitUpdate: {
      _this->_internal_mutable_process_exit_update()->::hedgehog::protocol::proto::ProcessExitUpdate::MergeFrom(
          from._internal_process_exit_update());
      break;
    }
    case kSpeakerAction: {
      _this->_internal_mutable_speaker_action()->::hedgehog::protocol::proto::SpeakerAction::MergeFrom(
          from._internal_speaker_action());
      break;
    }
    case kVisionCameraAction: {
      _this->_internal_mutable_vision_camera_action()->::hedgehog::protocol::proto::VisionCameraAction::MergeFrom(
          from._internal_vision_camera_action());
      break;
    }
    case kVisionChannelMessage: {
      _this->_internal_mutable_vision_channel_message()->::hedgehog::protocol::proto::VisionChannelMessage::MergeFrom(
          from._internal_vision_channel_message());
      break;
    }
    case kVisionCaptureFrameAction: {
      _this->_internal_mutable_vision_capture_frame_action()->::hedgehog::protocol::proto::VisionCaptureFrameAction::MergeFrom(
          from._internal_vision_capture_frame_action());
      break;
    }
    case kVisionFrameMessage: {
      _this->_internal_mutable_vision_frame_message()->::hedgehog::protocol::proto::VisionFrameMessage::MergeFrom(
          from._internal_vision_frame_message());
      break;
    }
    case kVisionFeatureMessage: {
      _this->_internal_mutable_vision_feature_message()->::hedgehog::protocol::proto::VisionFeatureMessage::MergeFrom(
          from._internal_vision_feature_message());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HedgehogMessage::CopyFrom(const HedgehogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.HedgehogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool HedgehogMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* HedgehogMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void HedgehogMessage::InternalSwap(HedgehogMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata HedgehogMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fhedgehog_2eproto[0]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
