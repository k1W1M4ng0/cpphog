// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/io.proto

#include "hedgehog/protocol/proto/io.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace hedgehog {
namespace protocol {
namespace proto {

inline constexpr IOAction::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : port_{0u},
        flags_{static_cast< ::hedgehog::protocol::proto::IOFlags >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IOAction::IOAction(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IOActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOActionDefaultTypeInternal() {}
  union {
    IOAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOActionDefaultTypeInternal _IOAction_default_instance_;

inline constexpr IOCommandMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subscription_{nullptr},
        port_{0u},
        flags_{static_cast< ::hedgehog::protocol::proto::IOFlags >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR IOCommandMessage::IOCommandMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct IOCommandMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IOCommandMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IOCommandMessageDefaultTypeInternal() {}
  union {
    IOCommandMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IOCommandMessageDefaultTypeInternal _IOCommandMessage_default_instance_;

inline constexpr DigitalMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subscription_{nullptr},
        port_{0u},
        value_{false} {}

template <typename>
PROTOBUF_CONSTEXPR DigitalMessage::DigitalMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct DigitalMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalMessageDefaultTypeInternal() {}
  union {
    DigitalMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalMessageDefaultTypeInternal _DigitalMessage_default_instance_;

inline constexpr AnalogMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subscription_{nullptr},
        port_{0u},
        value_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR AnalogMessage::AnalogMessage(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AnalogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogMessageDefaultTypeInternal() {}
  union {
    AnalogMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogMessageDefaultTypeInternal _AnalogMessage_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
static ::_pb::Metadata file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fio_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fio_2eproto = nullptr;
const ::uint32_t TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOAction, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOAction, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOAction, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOCommandMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOCommandMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOCommandMessage, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOCommandMessage, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::IOCommandMessage, _impl_.subscription_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::AnalogMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::AnalogMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::AnalogMessage, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::AnalogMessage, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::AnalogMessage, _impl_.subscription_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::DigitalMessage, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::DigitalMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::DigitalMessage, _impl_.port_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::DigitalMessage, _impl_.value_),
    PROTOBUF_FIELD_OFFSET(::hedgehog::protocol::proto::DigitalMessage, _impl_.subscription_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::hedgehog::protocol::proto::IOAction)},
        {10, 21, -1, sizeof(::hedgehog::protocol::proto::IOCommandMessage)},
        {24, 35, -1, sizeof(::hedgehog::protocol::proto::AnalogMessage)},
        {38, 49, -1, sizeof(::hedgehog::protocol::proto::DigitalMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::hedgehog::protocol::proto::_IOAction_default_instance_._instance,
    &::hedgehog::protocol::proto::_IOCommandMessage_default_instance_._instance,
    &::hedgehog::protocol::proto::_AnalogMessage_default_instance_._instance,
    &::hedgehog::protocol::proto::_DigitalMessage_default_instance_._instance,
};
const char descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fio_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n hedgehog/protocol/proto/io.proto\022\027hedg"
    "ehog.protocol.proto\032*hedgehog/protocol/p"
    "roto/subscription.proto\"I\n\010IOAction\022\014\n\004p"
    "ort\030\001 \001(\r\022/\n\005flags\030\002 \001(\0162 .hedgehog.prot"
    "ocol.proto.IOFlags\"\216\001\n\020IOCommandMessage\022"
    "\014\n\004port\030\001 \001(\r\022/\n\005flags\030\002 \001(\0162 .hedgehog."
    "protocol.proto.IOFlags\022;\n\014subscription\030\003"
    " \001(\0132%.hedgehog.protocol.proto.Subscript"
    "ion\"i\n\rAnalogMessage\022\014\n\004port\030\001 \001(\r\022\r\n\005va"
    "lue\030\002 \001(\r\022;\n\014subscription\030\003 \001(\0132%.hedgeh"
    "og.protocol.proto.Subscription\"j\n\016Digita"
    "lMessage\022\014\n\004port\030\001 \001(\r\022\r\n\005value\030\002 \001(\010\022;\n"
    "\014subscription\030\003 \001(\0132%.hedgehog.protocol."
    "proto.Subscription*\227\001\n\007IOFlags\022\022\n\016INPUT_"
    "FLOATING\020\000\022\020\n\014INPUT_PULLUP\020\002\022\022\n\016INPUT_PU"
    "LLDOWN\020\004\022\016\n\nOUTPUT_OFF\020\001\022\r\n\tOUTPUT_ON\020\t\022"
    "\n\n\006OUTPUT\020\001\022\n\n\006PULLUP\020\002\022\014\n\010PULLDOWN\020\004\022\t\n"
    "\005LEVEL\020\010\032\002\020\001B&\n\037at.pria.hedgehog.protoco"
    "l.protoB\003IoPb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_deps[1] =
    {
        &::descriptor_table_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto,
};
static ::absl::once_flag descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto = {
    false,
    false,
    740,
    descriptor_table_protodef_hedgehog_2fprotocol_2fproto_2fio_2eproto,
    "hedgehog/protocol/proto/io.proto",
    &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once,
    descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_hedgehog_2fprotocol_2fproto_2fio_2eproto::offsets,
    file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto,
    file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fio_2eproto,
    file_level_service_descriptors_hedgehog_2fprotocol_2fproto_2fio_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_getter() {
  return &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_hedgehog_2fprotocol_2fproto_2fio_2eproto(&descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto);
namespace hedgehog {
namespace protocol {
namespace proto {
const ::google::protobuf::EnumDescriptor* IOFlags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto);
  return file_level_enum_descriptors_hedgehog_2fprotocol_2fproto_2fio_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t IOFlags_internal_data_[] = {
    196608u, 32u, 98u, };
bool IOFlags_IsValid(int value) {
  return 0 <= value && value <= 9 && ((791u >> value) & 1) != 0;
}
// ===================================================================

class IOAction::_Internal {
 public:
};

IOAction::IOAction(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.IOAction)
}
IOAction::IOAction(
    ::google::protobuf::Arena* arena, const IOAction& from)
    : IOAction(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE IOAction::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IOAction::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::flags_));
}
IOAction::~IOAction() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.IOAction)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IOAction::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IOAction::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.IOAction)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IOAction::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> IOAction::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_IOAction_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // .hedgehog.protocol.proto.IOFlags flags = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IOAction, _impl_.flags_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IOAction, _impl_.flags_)}},
    // uint32 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IOAction, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IOAction, _impl_.port_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 port = 1;
    {PROTOBUF_FIELD_OFFSET(IOAction, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .hedgehog.protocol.proto.IOFlags flags = 2;
    {PROTOBUF_FIELD_OFFSET(IOAction, _impl_.flags_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* IOAction::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.IOAction)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_port(), target);
  }

  // .hedgehog.protocol.proto.IOFlags flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.IOAction)
  return target;
}

::size_t IOAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.IOAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // .hedgehog.protocol.proto.IOFlags flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IOAction::_class_data_ = {
    IOAction::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IOAction::GetClassData() const {
  return &_class_data_;
}

void IOAction::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IOAction*>(&to_msg);
  auto& from = static_cast<const IOAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.IOAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IOAction::CopyFrom(const IOAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.IOAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IOAction::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IOAction::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IOAction::InternalSwap(IOAction* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOAction, _impl_.flags_)
      + sizeof(IOAction::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(IOAction, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata IOAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto[0]);
}
// ===================================================================

class IOCommandMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<IOCommandMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_._has_bits_);
  static const ::hedgehog::protocol::proto::Subscription& subscription(const IOCommandMessage* msg);
  static void set_has_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hedgehog::protocol::proto::Subscription& IOCommandMessage::_Internal::subscription(const IOCommandMessage* msg) {
  return *msg->_impl_.subscription_;
}
void IOCommandMessage::clear_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.subscription_ != nullptr) _impl_.subscription_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IOCommandMessage::IOCommandMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.IOCommandMessage)
}
inline PROTOBUF_NDEBUG_INLINE IOCommandMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

IOCommandMessage::IOCommandMessage(
    ::google::protobuf::Arena* arena,
    const IOCommandMessage& from)
    : ::google::protobuf::Message(arena) {
  IOCommandMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.subscription_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(arena, *from._impl_.subscription_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:hedgehog.protocol.proto.IOCommandMessage)
}
inline PROTOBUF_NDEBUG_INLINE IOCommandMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void IOCommandMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscription_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, subscription_) +
               sizeof(Impl_::flags_));
}
IOCommandMessage::~IOCommandMessage() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.IOCommandMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void IOCommandMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.subscription_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void IOCommandMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.IOCommandMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subscription_ != nullptr);
    _impl_.subscription_->Clear();
  }
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.flags_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* IOCommandMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> IOCommandMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_IOCommandMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IOCommandMessage, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.port_)}},
    // .hedgehog.protocol.proto.IOFlags flags = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IOCommandMessage, _impl_.flags_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.flags_)}},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.subscription_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 port = 1;
    {PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .hedgehog.protocol.proto.IOFlags flags = 2;
    {PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.subscription_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::Subscription>()},
  }}, {{
  }},
};

::uint8_t* IOCommandMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.IOCommandMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_port(), target);
  }

  // .hedgehog.protocol.proto.IOFlags flags = 2;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_flags(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.IOCommandMessage)
  return target;
}

::size_t IOCommandMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.IOCommandMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hedgehog.protocol.proto.Subscription subscription = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscription_);
  }

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // .hedgehog.protocol.proto.IOFlags flags = 2;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData IOCommandMessage::_class_data_ = {
    IOCommandMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* IOCommandMessage::GetClassData() const {
  return &_class_data_;
}

void IOCommandMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<IOCommandMessage*>(&to_msg);
  auto& from = static_cast<const IOCommandMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.IOCommandMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subscription()->::hedgehog::protocol::proto::Subscription::MergeFrom(
        from._internal_subscription());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IOCommandMessage::CopyFrom(const IOCommandMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.IOCommandMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool IOCommandMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* IOCommandMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void IOCommandMessage::InternalSwap(IOCommandMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.flags_)
      + sizeof(IOCommandMessage::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(IOCommandMessage, _impl_.subscription_)>(
          reinterpret_cast<char*>(&_impl_.subscription_),
          reinterpret_cast<char*>(&other->_impl_.subscription_));
}

::google::protobuf::Metadata IOCommandMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto[1]);
}
// ===================================================================

class AnalogMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<AnalogMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_._has_bits_);
  static const ::hedgehog::protocol::proto::Subscription& subscription(const AnalogMessage* msg);
  static void set_has_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hedgehog::protocol::proto::Subscription& AnalogMessage::_Internal::subscription(const AnalogMessage* msg) {
  return *msg->_impl_.subscription_;
}
void AnalogMessage::clear_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.subscription_ != nullptr) _impl_.subscription_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AnalogMessage::AnalogMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.AnalogMessage)
}
inline PROTOBUF_NDEBUG_INLINE AnalogMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AnalogMessage::AnalogMessage(
    ::google::protobuf::Arena* arena,
    const AnalogMessage& from)
    : ::google::protobuf::Message(arena) {
  AnalogMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.subscription_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(arena, *from._impl_.subscription_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, value_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::value_));

  // @@protoc_insertion_point(copy_constructor:hedgehog.protocol.proto.AnalogMessage)
}
inline PROTOBUF_NDEBUG_INLINE AnalogMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AnalogMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscription_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, subscription_) +
               sizeof(Impl_::value_));
}
AnalogMessage::~AnalogMessage() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.AnalogMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void AnalogMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.subscription_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AnalogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.AnalogMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subscription_ != nullptr);
    _impl_.subscription_->Clear();
  }
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* AnalogMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> AnalogMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AnalogMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogMessage, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.port_)}},
    // uint32 value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AnalogMessage, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.value_)}},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.subscription_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 port = 1;
    {PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 value = 2;
    {PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.subscription_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::Subscription>()},
  }}, {{
  }},
};

::uint8_t* AnalogMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.AnalogMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_port(), target);
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.AnalogMessage)
  return target;
}

::size_t AnalogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.AnalogMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hedgehog.protocol.proto.Subscription subscription = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscription_);
  }

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // uint32 value = 2;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData AnalogMessage::_class_data_ = {
    AnalogMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* AnalogMessage::GetClassData() const {
  return &_class_data_;
}

void AnalogMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<AnalogMessage*>(&to_msg);
  auto& from = static_cast<const AnalogMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.AnalogMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subscription()->::hedgehog::protocol::proto::Subscription::MergeFrom(
        from._internal_subscription());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogMessage::CopyFrom(const AnalogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.AnalogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AnalogMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AnalogMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AnalogMessage::InternalSwap(AnalogMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.value_)
      + sizeof(AnalogMessage::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(AnalogMessage, _impl_.subscription_)>(
          reinterpret_cast<char*>(&_impl_.subscription_),
          reinterpret_cast<char*>(&other->_impl_.subscription_));
}

::google::protobuf::Metadata AnalogMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto[2]);
}
// ===================================================================

class DigitalMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DigitalMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_._has_bits_);
  static const ::hedgehog::protocol::proto::Subscription& subscription(const DigitalMessage* msg);
  static void set_has_subscription(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::hedgehog::protocol::proto::Subscription& DigitalMessage::_Internal::subscription(const DigitalMessage* msg) {
  return *msg->_impl_.subscription_;
}
void DigitalMessage::clear_subscription() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.subscription_ != nullptr) _impl_.subscription_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DigitalMessage::DigitalMessage(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:hedgehog.protocol.proto.DigitalMessage)
}
inline PROTOBUF_NDEBUG_INLINE DigitalMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

DigitalMessage::DigitalMessage(
    ::google::protobuf::Arena* arena,
    const DigitalMessage& from)
    : ::google::protobuf::Message(arena) {
  DigitalMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.subscription_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::hedgehog::protocol::proto::Subscription>(arena, *from._impl_.subscription_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, value_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::value_));

  // @@protoc_insertion_point(copy_constructor:hedgehog.protocol.proto.DigitalMessage)
}
inline PROTOBUF_NDEBUG_INLINE DigitalMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void DigitalMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscription_),
           0,
           offsetof(Impl_, value_) -
               offsetof(Impl_, subscription_) +
               sizeof(Impl_::value_));
}
DigitalMessage::~DigitalMessage() {
  // @@protoc_insertion_point(destructor:hedgehog.protocol.proto.DigitalMessage)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DigitalMessage::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.subscription_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void DigitalMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:hedgehog.protocol.proto.DigitalMessage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.subscription_ != nullptr);
    _impl_.subscription_->Clear();
  }
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.value_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.value_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DigitalMessage::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> DigitalMessage::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_DigitalMessage_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 port = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DigitalMessage, _impl_.port_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.port_)}},
    // bool value = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(DigitalMessage, _impl_.value_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.value_)}},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.subscription_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 port = 1;
    {PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // bool value = 2;
    {PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .hedgehog.protocol.proto.Subscription subscription = 3;
    {PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.subscription_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::hedgehog::protocol::proto::Subscription>()},
  }}, {{
  }},
};

::uint8_t* DigitalMessage::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hedgehog.protocol.proto.DigitalMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_port(), target);
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .hedgehog.protocol.proto.Subscription subscription = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::subscription(this),
        _Internal::subscription(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hedgehog.protocol.proto.DigitalMessage)
  return target;
}

::size_t DigitalMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hedgehog.protocol.proto.DigitalMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hedgehog.protocol.proto.Subscription subscription = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.subscription_);
  }

  // uint32 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_port());
  }

  // bool value = 2;
  if (this->_internal_value() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DigitalMessage::_class_data_ = {
    DigitalMessage::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* DigitalMessage::GetClassData() const {
  return &_class_data_;
}

void DigitalMessage::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DigitalMessage*>(&to_msg);
  auto& from = static_cast<const DigitalMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hedgehog.protocol.proto.DigitalMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_subscription()->::hedgehog::protocol::proto::Subscription::MergeFrom(
        from._internal_subscription());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalMessage::CopyFrom(const DigitalMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hedgehog.protocol.proto.DigitalMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DigitalMessage::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* DigitalMessage::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void DigitalMessage::InternalSwap(DigitalMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.value_)
      + sizeof(DigitalMessage::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(DigitalMessage, _impl_.subscription_)>(
          reinterpret_cast<char*>(&_impl_.subscription_),
          reinterpret_cast<char*>(&other->_impl_.subscription_));
}

::google::protobuf::Metadata DigitalMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_getter, &descriptor_table_hedgehog_2fprotocol_2fproto_2fio_2eproto_once,
      file_level_metadata_hedgehog_2fprotocol_2fproto_2fio_2eproto[3]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
