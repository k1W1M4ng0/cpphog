// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/subscription.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto;
namespace hedgehog {
namespace protocol {
namespace proto {
class Subscription;
struct SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hedgehog {
namespace protocol {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class Subscription final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.Subscription) */ {
 public:
  inline Subscription() : Subscription(nullptr) {}
  ~Subscription() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Subscription(::google::protobuf::internal::ConstantInitialized);

  inline Subscription(const Subscription& from)
      : Subscription(nullptr, from) {}
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subscription& operator=(Subscription&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subscription& default_instance() {
    return *internal_default_instance();
  }
  enum GranularityCase {
    kIntGranularity = 4,
    GRANULARITY_NOT_SET = 0,
  };

  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }
  inline void Swap(Subscription* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subscription* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Subscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Subscription& from) {
    Subscription::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Subscription* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.Subscription";
  }
  protected:
  explicit Subscription(::google::protobuf::Arena* arena);
  Subscription(::google::protobuf::Arena* arena, const Subscription& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kGranularityTimeoutFieldNumber = 3,
    kIntGranularityFieldNumber = 4,
  };
  // bool subscribe = 1;
  void clear_subscribe() ;
  bool subscribe() const;
  void set_subscribe(bool value);

  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);

  public:
  // uint32 timeout = 2;
  void clear_timeout() ;
  ::uint32_t timeout() const;
  void set_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_timeout() const;
  void _internal_set_timeout(::uint32_t value);

  public:
  // uint32 granularity_timeout = 3;
  void clear_granularity_timeout() ;
  ::uint32_t granularity_timeout() const;
  void set_granularity_timeout(::uint32_t value);

  private:
  ::uint32_t _internal_granularity_timeout() const;
  void _internal_set_granularity_timeout(::uint32_t value);

  public:
  // uint32 int_granularity = 4;
  bool has_int_granularity() const;
  void clear_int_granularity() ;
  ::uint32_t int_granularity() const;
  void set_int_granularity(::uint32_t value);

  private:
  ::uint32_t _internal_int_granularity() const;
  void _internal_set_int_granularity(::uint32_t value);

  public:
  void clear_granularity();
  GranularityCase granularity_case() const;
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.Subscription)
 private:
  class _Internal;
  void set_has_int_granularity();

  inline bool has_granularity() const;
  inline void clear_has_granularity();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool subscribe_;
    ::uint32_t timeout_;
    ::uint32_t granularity_timeout_;
    union GranularityUnion {
      constexpr GranularityUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t int_granularity_;
    } granularity_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Subscription

// bool subscribe = 1;
inline void Subscription::clear_subscribe() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.subscribe_ = false;
}
inline bool Subscription::subscribe() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Subscription.subscribe)
  return _internal_subscribe();
}
inline void Subscription::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Subscription.subscribe)
}
inline bool Subscription::_internal_subscribe() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.subscribe_;
}
inline void Subscription::_internal_set_subscribe(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.subscribe_ = value;
}

// uint32 timeout = 2;
inline void Subscription::clear_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timeout_ = 0u;
}
inline ::uint32_t Subscription::timeout() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Subscription.timeout)
  return _internal_timeout();
}
inline void Subscription::set_timeout(::uint32_t value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Subscription.timeout)
}
inline ::uint32_t Subscription::_internal_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timeout_;
}
inline void Subscription::_internal_set_timeout(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timeout_ = value;
}

// uint32 granularity_timeout = 3;
inline void Subscription::clear_granularity_timeout() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.granularity_timeout_ = 0u;
}
inline ::uint32_t Subscription::granularity_timeout() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Subscription.granularity_timeout)
  return _internal_granularity_timeout();
}
inline void Subscription::set_granularity_timeout(::uint32_t value) {
  _internal_set_granularity_timeout(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Subscription.granularity_timeout)
}
inline ::uint32_t Subscription::_internal_granularity_timeout() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.granularity_timeout_;
}
inline void Subscription::_internal_set_granularity_timeout(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.granularity_timeout_ = value;
}

// uint32 int_granularity = 4;
inline bool Subscription::has_int_granularity() const {
  return granularity_case() == kIntGranularity;
}
inline void Subscription::set_has_int_granularity() {
  _impl_._oneof_case_[0] = kIntGranularity;
}
inline void Subscription::clear_int_granularity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (granularity_case() == kIntGranularity) {
    _impl_.granularity_.int_granularity_ = 0u;
    clear_has_granularity();
  }
}
inline ::uint32_t Subscription::int_granularity() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.Subscription.int_granularity)
  return _internal_int_granularity();
}
inline void Subscription::set_int_granularity(::uint32_t value) {
  _internal_set_int_granularity(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.Subscription.int_granularity)
}
inline ::uint32_t Subscription::_internal_int_granularity() const {
  if (granularity_case() == kIntGranularity) {
    return _impl_.granularity_.int_granularity_;
  }
  return 0u;
}
inline void Subscription::_internal_set_int_granularity(::uint32_t value) {
  if (granularity_case() != kIntGranularity) {
    clear_granularity();
    set_has_int_granularity();
  }
  _impl_.granularity_.int_granularity_ = value;
}

inline bool Subscription::has_granularity() const {
  return granularity_case() != GRANULARITY_NOT_SET;
}
inline void Subscription::clear_has_granularity() {
  _impl_._oneof_case_[0] = GRANULARITY_NOT_SET;
}
inline Subscription::GranularityCase Subscription::granularity_case() const {
  return Subscription::GranularityCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fsubscription_2eproto_2epb_2eh
