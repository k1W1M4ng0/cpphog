// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hedgehog/protocol/proto/process.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fprocess_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fprocess_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_hedgehog_2fprotocol_2fproto_2fprocess_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
namespace hedgehog {
namespace protocol {
namespace proto {
class ProcessExecuteAction;
struct ProcessExecuteActionDefaultTypeInternal;
extern ProcessExecuteActionDefaultTypeInternal _ProcessExecuteAction_default_instance_;
class ProcessExecuteReply;
struct ProcessExecuteReplyDefaultTypeInternal;
extern ProcessExecuteReplyDefaultTypeInternal _ProcessExecuteReply_default_instance_;
class ProcessExitUpdate;
struct ProcessExitUpdateDefaultTypeInternal;
extern ProcessExitUpdateDefaultTypeInternal _ProcessExitUpdate_default_instance_;
class ProcessSignalAction;
struct ProcessSignalActionDefaultTypeInternal;
extern ProcessSignalActionDefaultTypeInternal _ProcessSignalAction_default_instance_;
class ProcessStreamMessage;
struct ProcessStreamMessageDefaultTypeInternal;
extern ProcessStreamMessageDefaultTypeInternal _ProcessStreamMessage_default_instance_;
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace hedgehog {
namespace protocol {
namespace proto {
enum ProcessFileno : int {
  STDIN = 0,
  STDOUT = 1,
  STDERR = 2,
  ProcessFileno_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ProcessFileno_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ProcessFileno_IsValid(int value);
extern const uint32_t ProcessFileno_internal_data_[];
constexpr ProcessFileno ProcessFileno_MIN = static_cast<ProcessFileno>(0);
constexpr ProcessFileno ProcessFileno_MAX = static_cast<ProcessFileno>(2);
constexpr int ProcessFileno_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ProcessFileno_descriptor();
template <typename T>
const std::string& ProcessFileno_Name(T value) {
  static_assert(std::is_same<T, ProcessFileno>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProcessFileno_Name().");
  return ProcessFileno_Name(static_cast<ProcessFileno>(value));
}
template <>
inline const std::string& ProcessFileno_Name(ProcessFileno value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ProcessFileno_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ProcessFileno_Parse(absl::string_view name, ProcessFileno* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcessFileno>(
      ProcessFileno_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ProcessStreamMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.ProcessStreamMessage) */ {
 public:
  inline ProcessStreamMessage() : ProcessStreamMessage(nullptr) {}
  ~ProcessStreamMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessStreamMessage(::google::protobuf::internal::ConstantInitialized);

  inline ProcessStreamMessage(const ProcessStreamMessage& from)
      : ProcessStreamMessage(nullptr, from) {}
  ProcessStreamMessage(ProcessStreamMessage&& from) noexcept
    : ProcessStreamMessage() {
    *this = ::std::move(from);
  }

  inline ProcessStreamMessage& operator=(const ProcessStreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessStreamMessage& operator=(ProcessStreamMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessStreamMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessStreamMessage* internal_default_instance() {
    return reinterpret_cast<const ProcessStreamMessage*>(
               &_ProcessStreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessStreamMessage& a, ProcessStreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessStreamMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessStreamMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessStreamMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessStreamMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessStreamMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessStreamMessage& from) {
    ProcessStreamMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessStreamMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.ProcessStreamMessage";
  }
  protected:
  explicit ProcessStreamMessage(::google::protobuf::Arena* arena);
  ProcessStreamMessage(::google::protobuf::Arena* arena, const ProcessStreamMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChunkFieldNumber = 3,
    kPidFieldNumber = 1,
    kFilenoFieldNumber = 2,
  };
  // bytes chunk = 3;
  void clear_chunk() ;
  const std::string& chunk() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk(Arg_&& arg, Args_... args);
  std::string* mutable_chunk();
  PROTOBUF_NODISCARD std::string* release_chunk();
  void set_allocated_chunk(std::string* value);

  private:
  const std::string& _internal_chunk() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk(
      const std::string& value);
  std::string* _internal_mutable_chunk();

  public:
  // uint32 pid = 1;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // .hedgehog.protocol.proto.ProcessFileno fileno = 2;
  void clear_fileno() ;
  ::hedgehog::protocol::proto::ProcessFileno fileno() const;
  void set_fileno(::hedgehog::protocol::proto::ProcessFileno value);

  private:
  ::hedgehog::protocol::proto::ProcessFileno _internal_fileno() const;
  void _internal_set_fileno(::hedgehog::protocol::proto::ProcessFileno value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.ProcessStreamMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr chunk_;
    ::uint32_t pid_;
    int fileno_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
};// -------------------------------------------------------------------

class ProcessSignalAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.ProcessSignalAction) */ {
 public:
  inline ProcessSignalAction() : ProcessSignalAction(nullptr) {}
  ~ProcessSignalAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessSignalAction(::google::protobuf::internal::ConstantInitialized);

  inline ProcessSignalAction(const ProcessSignalAction& from)
      : ProcessSignalAction(nullptr, from) {}
  ProcessSignalAction(ProcessSignalAction&& from) noexcept
    : ProcessSignalAction() {
    *this = ::std::move(from);
  }

  inline ProcessSignalAction& operator=(const ProcessSignalAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessSignalAction& operator=(ProcessSignalAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessSignalAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessSignalAction* internal_default_instance() {
    return reinterpret_cast<const ProcessSignalAction*>(
               &_ProcessSignalAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessSignalAction& a, ProcessSignalAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessSignalAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessSignalAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessSignalAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessSignalAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessSignalAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessSignalAction& from) {
    ProcessSignalAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessSignalAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.ProcessSignalAction";
  }
  protected:
  explicit ProcessSignalAction(::google::protobuf::Arena* arena);
  ProcessSignalAction(::google::protobuf::Arena* arena, const ProcessSignalAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kSignalFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // uint32 signal = 2;
  void clear_signal() ;
  ::uint32_t signal() const;
  void set_signal(::uint32_t value);

  private:
  ::uint32_t _internal_signal() const;
  void _internal_set_signal(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.ProcessSignalAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t pid_;
    ::uint32_t signal_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
};// -------------------------------------------------------------------

class ProcessExitUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.ProcessExitUpdate) */ {
 public:
  inline ProcessExitUpdate() : ProcessExitUpdate(nullptr) {}
  ~ProcessExitUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessExitUpdate(::google::protobuf::internal::ConstantInitialized);

  inline ProcessExitUpdate(const ProcessExitUpdate& from)
      : ProcessExitUpdate(nullptr, from) {}
  ProcessExitUpdate(ProcessExitUpdate&& from) noexcept
    : ProcessExitUpdate() {
    *this = ::std::move(from);
  }

  inline ProcessExitUpdate& operator=(const ProcessExitUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessExitUpdate& operator=(ProcessExitUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessExitUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessExitUpdate* internal_default_instance() {
    return reinterpret_cast<const ProcessExitUpdate*>(
               &_ProcessExitUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ProcessExitUpdate& a, ProcessExitUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessExitUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessExitUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessExitUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessExitUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessExitUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessExitUpdate& from) {
    ProcessExitUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessExitUpdate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.ProcessExitUpdate";
  }
  protected:
  explicit ProcessExitUpdate(::google::protobuf::Arena* arena);
  ProcessExitUpdate(::google::protobuf::Arena* arena, const ProcessExitUpdate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
    kExitCodeFieldNumber = 2,
  };
  // uint32 pid = 1;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // int32 exit_code = 2;
  void clear_exit_code() ;
  ::int32_t exit_code() const;
  void set_exit_code(::int32_t value);

  private:
  ::int32_t _internal_exit_code() const;
  void _internal_set_exit_code(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.ProcessExitUpdate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t pid_;
    ::int32_t exit_code_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
};// -------------------------------------------------------------------

class ProcessExecuteReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.ProcessExecuteReply) */ {
 public:
  inline ProcessExecuteReply() : ProcessExecuteReply(nullptr) {}
  ~ProcessExecuteReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessExecuteReply(::google::protobuf::internal::ConstantInitialized);

  inline ProcessExecuteReply(const ProcessExecuteReply& from)
      : ProcessExecuteReply(nullptr, from) {}
  ProcessExecuteReply(ProcessExecuteReply&& from) noexcept
    : ProcessExecuteReply() {
    *this = ::std::move(from);
  }

  inline ProcessExecuteReply& operator=(const ProcessExecuteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessExecuteReply& operator=(ProcessExecuteReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessExecuteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessExecuteReply* internal_default_instance() {
    return reinterpret_cast<const ProcessExecuteReply*>(
               &_ProcessExecuteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessExecuteReply& a, ProcessExecuteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessExecuteReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessExecuteReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessExecuteReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessExecuteReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessExecuteReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessExecuteReply& from) {
    ProcessExecuteReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessExecuteReply* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.ProcessExecuteReply";
  }
  protected:
  explicit ProcessExecuteReply(::google::protobuf::Arena* arena);
  ProcessExecuteReply(::google::protobuf::Arena* arena, const ProcessExecuteReply& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPidFieldNumber = 1,
  };
  // uint32 pid = 1;
  void clear_pid() ;
  ::uint32_t pid() const;
  void set_pid(::uint32_t value);

  private:
  ::uint32_t _internal_pid() const;
  void _internal_set_pid(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.ProcessExecuteReply)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint32_t pid_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
};// -------------------------------------------------------------------

class ProcessExecuteAction final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hedgehog.protocol.proto.ProcessExecuteAction) */ {
 public:
  inline ProcessExecuteAction() : ProcessExecuteAction(nullptr) {}
  ~ProcessExecuteAction() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ProcessExecuteAction(::google::protobuf::internal::ConstantInitialized);

  inline ProcessExecuteAction(const ProcessExecuteAction& from)
      : ProcessExecuteAction(nullptr, from) {}
  ProcessExecuteAction(ProcessExecuteAction&& from) noexcept
    : ProcessExecuteAction() {
    *this = ::std::move(from);
  }

  inline ProcessExecuteAction& operator=(const ProcessExecuteAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessExecuteAction& operator=(ProcessExecuteAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProcessExecuteAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProcessExecuteAction* internal_default_instance() {
    return reinterpret_cast<const ProcessExecuteAction*>(
               &_ProcessExecuteAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessExecuteAction& a, ProcessExecuteAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessExecuteAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProcessExecuteAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProcessExecuteAction* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProcessExecuteAction>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ProcessExecuteAction& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ProcessExecuteAction& from) {
    ProcessExecuteAction::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ProcessExecuteAction* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "hedgehog.protocol.proto.ProcessExecuteAction";
  }
  protected:
  explicit ProcessExecuteAction(::google::protobuf::Arena* arena);
  ProcessExecuteAction(::google::protobuf::Arena* arena, const ProcessExecuteAction& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kWorkingDirFieldNumber = 1,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;

  public:
  void clear_args() ;
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, std::size_t size);
  void set_args(int index, absl::string_view value);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, std::size_t size);
  void add_args(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& args() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_args();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_args() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_args();

  public:
  // string working_dir = 1;
  void clear_working_dir() ;
  const std::string& working_dir() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_working_dir(Arg_&& arg, Args_... args);
  std::string* mutable_working_dir();
  PROTOBUF_NODISCARD std::string* release_working_dir();
  void set_allocated_working_dir(std::string* value);

  private:
  const std::string& _internal_working_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_working_dir(
      const std::string& value);
  std::string* _internal_mutable_working_dir();

  public:
  // @@protoc_insertion_point(class_scope:hedgehog.protocol.proto.ProcessExecuteAction)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> args_;
    ::google::protobuf::internal::ArenaStringPtr working_dir_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hedgehog_2fprotocol_2fproto_2fprocess_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ProcessExecuteAction

// repeated string args = 2;
inline int ProcessExecuteAction::_internal_args_size() const {
  return _internal_args().size();
}
inline int ProcessExecuteAction::args_size() const {
  return _internal_args_size();
}
inline void ProcessExecuteAction::clear_args() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.args_.Clear();
}
inline std::string* ProcessExecuteAction::add_args()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_args()->Add();
  // @@protoc_insertion_point(field_add_mutable:hedgehog.protocol.proto.ProcessExecuteAction.args)
  return _s;
}
inline const std::string& ProcessExecuteAction::args(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessExecuteAction.args)
  return _internal_args().Get(index);
}
inline std::string* ProcessExecuteAction::mutable_args(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.ProcessExecuteAction.args)
  return _internal_mutable_args()->Mutable(index);
}
inline void ProcessExecuteAction::set_args(int index, const std::string& value) {
  _internal_mutable_args()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::set_args(int index, std::string&& value) {
  _internal_mutable_args()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::set_args(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_args()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::set_args(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_args()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::set_args(int index, absl::string_view value) {
  _internal_mutable_args()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::add_args(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_args()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::add_args(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_args()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::add_args(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_args()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::add_args(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_args()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline void ProcessExecuteAction::add_args(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_args()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:hedgehog.protocol.proto.ProcessExecuteAction.args)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProcessExecuteAction::args() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:hedgehog.protocol.proto.ProcessExecuteAction.args)
  return _internal_args();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProcessExecuteAction::mutable_args() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:hedgehog.protocol.proto.ProcessExecuteAction.args)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_args();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ProcessExecuteAction::_internal_args() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.args_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ProcessExecuteAction::_internal_mutable_args() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.args_;
}

// string working_dir = 1;
inline void ProcessExecuteAction::clear_working_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.working_dir_.ClearToEmpty();
}
inline const std::string& ProcessExecuteAction::working_dir() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessExecuteAction.working_dir)
  return _internal_working_dir();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessExecuteAction::set_working_dir(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.working_dir_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExecuteAction.working_dir)
}
inline std::string* ProcessExecuteAction::mutable_working_dir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_working_dir();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.ProcessExecuteAction.working_dir)
  return _s;
}
inline const std::string& ProcessExecuteAction::_internal_working_dir() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.working_dir_.Get();
}
inline void ProcessExecuteAction::_internal_set_working_dir(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.working_dir_.Set(value, GetArena());
}
inline std::string* ProcessExecuteAction::_internal_mutable_working_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.working_dir_.Mutable( GetArena());
}
inline std::string* ProcessExecuteAction::release_working_dir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.ProcessExecuteAction.working_dir)
  return _impl_.working_dir_.Release();
}
inline void ProcessExecuteAction::set_allocated_working_dir(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.working_dir_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.working_dir_.IsDefault()) {
          _impl_.working_dir_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.ProcessExecuteAction.working_dir)
}

// -------------------------------------------------------------------

// ProcessExecuteReply

// uint32 pid = 1;
inline void ProcessExecuteReply::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0u;
}
inline ::uint32_t ProcessExecuteReply::pid() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessExecuteReply.pid)
  return _internal_pid();
}
inline void ProcessExecuteReply::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExecuteReply.pid)
}
inline ::uint32_t ProcessExecuteReply::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void ProcessExecuteReply::_internal_set_pid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// -------------------------------------------------------------------

// ProcessStreamMessage

// uint32 pid = 1;
inline void ProcessStreamMessage::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0u;
}
inline ::uint32_t ProcessStreamMessage::pid() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessStreamMessage.pid)
  return _internal_pid();
}
inline void ProcessStreamMessage::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessStreamMessage.pid)
}
inline ::uint32_t ProcessStreamMessage::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void ProcessStreamMessage::_internal_set_pid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// .hedgehog.protocol.proto.ProcessFileno fileno = 2;
inline void ProcessStreamMessage::clear_fileno() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fileno_ = 0;
}
inline ::hedgehog::protocol::proto::ProcessFileno ProcessStreamMessage::fileno() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessStreamMessage.fileno)
  return _internal_fileno();
}
inline void ProcessStreamMessage::set_fileno(::hedgehog::protocol::proto::ProcessFileno value) {
  _internal_set_fileno(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessStreamMessage.fileno)
}
inline ::hedgehog::protocol::proto::ProcessFileno ProcessStreamMessage::_internal_fileno() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::hedgehog::protocol::proto::ProcessFileno>(_impl_.fileno_);
}
inline void ProcessStreamMessage::_internal_set_fileno(::hedgehog::protocol::proto::ProcessFileno value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fileno_ = value;
}

// bytes chunk = 3;
inline void ProcessStreamMessage::clear_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.ClearToEmpty();
}
inline const std::string& ProcessStreamMessage::chunk() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessStreamMessage.chunk)
  return _internal_chunk();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ProcessStreamMessage::set_chunk(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessStreamMessage.chunk)
}
inline std::string* ProcessStreamMessage::mutable_chunk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:hedgehog.protocol.proto.ProcessStreamMessage.chunk)
  return _s;
}
inline const std::string& ProcessStreamMessage::_internal_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_.Get();
}
inline void ProcessStreamMessage::_internal_set_chunk(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.chunk_.Set(value, GetArena());
}
inline std::string* ProcessStreamMessage::_internal_mutable_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.chunk_.Mutable( GetArena());
}
inline std::string* ProcessStreamMessage::release_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:hedgehog.protocol.proto.ProcessStreamMessage.chunk)
  return _impl_.chunk_.Release();
}
inline void ProcessStreamMessage::set_allocated_chunk(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_.IsDefault()) {
          _impl_.chunk_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hedgehog.protocol.proto.ProcessStreamMessage.chunk)
}

// -------------------------------------------------------------------

// ProcessSignalAction

// uint32 pid = 1;
inline void ProcessSignalAction::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0u;
}
inline ::uint32_t ProcessSignalAction::pid() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessSignalAction.pid)
  return _internal_pid();
}
inline void ProcessSignalAction::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessSignalAction.pid)
}
inline ::uint32_t ProcessSignalAction::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void ProcessSignalAction::_internal_set_pid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// uint32 signal = 2;
inline void ProcessSignalAction::clear_signal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.signal_ = 0u;
}
inline ::uint32_t ProcessSignalAction::signal() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessSignalAction.signal)
  return _internal_signal();
}
inline void ProcessSignalAction::set_signal(::uint32_t value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessSignalAction.signal)
}
inline ::uint32_t ProcessSignalAction::_internal_signal() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.signal_;
}
inline void ProcessSignalAction::_internal_set_signal(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.signal_ = value;
}

// -------------------------------------------------------------------

// ProcessExitUpdate

// uint32 pid = 1;
inline void ProcessExitUpdate::clear_pid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.pid_ = 0u;
}
inline ::uint32_t ProcessExitUpdate::pid() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessExitUpdate.pid)
  return _internal_pid();
}
inline void ProcessExitUpdate::set_pid(::uint32_t value) {
  _internal_set_pid(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExitUpdate.pid)
}
inline ::uint32_t ProcessExitUpdate::_internal_pid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.pid_;
}
inline void ProcessExitUpdate::_internal_set_pid(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.pid_ = value;
}

// int32 exit_code = 2;
inline void ProcessExitUpdate::clear_exit_code() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exit_code_ = 0;
}
inline ::int32_t ProcessExitUpdate::exit_code() const {
  // @@protoc_insertion_point(field_get:hedgehog.protocol.proto.ProcessExitUpdate.exit_code)
  return _internal_exit_code();
}
inline void ProcessExitUpdate::set_exit_code(::int32_t value) {
  _internal_set_exit_code(value);
  // @@protoc_insertion_point(field_set:hedgehog.protocol.proto.ProcessExitUpdate.exit_code)
}
inline ::int32_t ProcessExitUpdate::_internal_exit_code() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exit_code_;
}
inline void ProcessExitUpdate::_internal_set_exit_code(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exit_code_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace protocol
}  // namespace hedgehog


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::hedgehog::protocol::proto::ProcessFileno> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::hedgehog::protocol::proto::ProcessFileno>() {
  return ::hedgehog::protocol::proto::ProcessFileno_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_hedgehog_2fprotocol_2fproto_2fprocess_2eproto_2epb_2eh
